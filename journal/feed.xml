<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xml:base="http://cushionapp.com">
  <channel>
    <title>Cushion</title>
    <link>http://cushionapp.com</link>
    <description></description>
    <pubDate>Sun, 14 Jun 2015 18:31:11 -0400</pubDate>
    
    <item>
      <title>Intro to Integrations</title>
      <link>http://cushionapp.com/journal/intro-to-integrations</link>
      <pubDate>Sun, 24 May 2015 10:50:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/intro-to-integrations</guid>
      <description>&lt;p&gt;Several weeks into building Cushion, I started thinking about integrations. Obviously, I was ahead of myself, but I knew integrations would play a vital role in the success of Cushion. Having been a freelancer for a few years at that point, I was aware of the “usual suspects” of freelancing services, and I knew that most freelancers were tethered to these services after years of use. I also knew that many of these freelancers weren’t head-over-heels for them, but the services were so engrained in their day-to-day that convincing these freelancers to jump ship entirely would be an exhausting, uphill battle. Fortunately, this was never the plan.&lt;/p&gt;

&lt;p&gt;From the beginning, I wanted Cushion to be more than another equal alternative, feature-matching against every other service. I’ve always seen it as a valuable addition. Instead of trying to make Cushion into an all-in-one Swiss army knife, I could let other services focus on what they do best while Cushion provides a new angle on the same data. Rather than interrupting a freelancer’s workflow, Cushion could be an extension of it—a sidekick to the other services.&lt;/p&gt;

&lt;p&gt;A few months went by and I became impatient. I kept thinking about how I’d need to build integrations eventually, so why not get a head-start? “Too soon”—the words of a wise developer in my studio space. He was right, but I was too impatient. To give you an idea of how laughably early this was in development, users couldn’t even change their password yet. I was blind to what Cushion needed at that moment and too focused on what Cushion could do without for now—this is why project managers exist. I spent a few days on integrations before thinking to myself, “Too soon.”&lt;/p&gt;

&lt;p&gt;Several more months passed and I got the itch again. This time, instead of trying to build an entirely custom system for integrations, I decided to take a half-step by integrating with &lt;a href=&quot;http://zpr.io/ZnSS&quot;&gt;Zapier&lt;/a&gt;, a service for communicating between APIs. Since Zapier would be doing most of the heavy lifting, I could achieve the functionality I was after by writing a few workflows, like “create an invoice in Cushion when an invoice is created in [another service]”. &lt;/p&gt;

&lt;p&gt;At first, this seemed like a step in the right direction, but as I spent more time with Zapier, I knew it wasn’t right for Cushion—I recognized the burden I would be placing on the users. In order for them to integrate Cushion with their existing services, they would need to first create an account in Zapier. Then, they would need to navigate through Zapier, learn how Zapier works, and complete several steps to set up the integration. I would need to write thorough documentation and answer support emails for using Zapier. This wasn’t ideal for anyone.&lt;/p&gt;

&lt;p&gt;Simplicity is one of Cushion’s guiding principles, and sending users through hoops on another service is anything but simple. That route is simple for me, the developer, but not for the user. There’s a reason people pay for services—they want to lighten their workload. If this weren’t the case, we’d all be satisfied using spreadsheets. Instead of sending users somewhere else for integrations, I should assume the burden and build a system where the burden is non-existent to the user. Enabling an integration should be as easy as a single click.&lt;/p&gt;

&lt;p&gt;I scrapped all the work with Zapier and took a break from integrations for another month. When I returned, I knew exactly how to approach them. Under the hood, I would break the system into four specific parts—services, recipes, authorizations, and integrations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A “Service” is a 3rd party service that Cushion can integrate with (i.e., Harvest). It has a name and an icon.&lt;/li&gt;
&lt;li&gt;A “Recipe” is a type of integration (i.e., Auto-Import). It has a name and a description. A service can have many recipes, which represent the service’s available integrations.&lt;/li&gt;
&lt;li&gt;An “Authorization” is a user’s connection to a service. It has an access token and a refresh token. A user can have many authorizations with various services. Authorizations are the key to communicating with the services.&lt;/li&gt;
&lt;li&gt;An “Integration” is a user’s authorized recipe for a service. The other models define every aspect of the integration, so it only needs their associations in order to exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After establishing the internal structure of integrations, I started to design the exterior. I began mapping out the pages I would need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all services&lt;/li&gt;
&lt;li&gt;an individual service&lt;/li&gt;
&lt;li&gt;all authorizations&lt;/li&gt;
&lt;li&gt;an individual authorization&lt;/li&gt;
&lt;li&gt;all integrations&lt;/li&gt;
&lt;li&gt;an individual integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It didn’t take long for me to realize that I was thinking too much like a developer. Just because I have four models for integrations doesn’t mean each model needs its own index and instance page. I took a step back and started thinking in terms of what I would expect. For integrations, I should be able to view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;services to authorize&lt;/li&gt;
&lt;li&gt;my existing authorizations&lt;/li&gt;
&lt;li&gt;recipes to enable&lt;/li&gt;
&lt;li&gt;my existing integrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, I considered how to structure these lists. I definitely don’t think each one needs its own page, so I thought about how I could combine them. Since integrations are first and foremost about the services, I could use the services to organize everything into two pages—an index page for services and an individual service page. These pages would include more than just the services, but I’d use the services as a top-level category.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-services.png&quot; alt=&quot;intro-to-integrations-services&quot;&gt; &lt;/p&gt;

&lt;p&gt;When arriving at the main integrations page, I should see a list of services to authorize. If I haven’t authorized a service, its button should say “authorize” and clicking it should take me through the authorization flow for that service. If I have already authorized a service, it should say “view” and clicking it should take me to that service’s page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-service.png&quot; alt=&quot;intro-to-integrations-service&quot;&gt; &lt;/p&gt;

&lt;p&gt;After authorizing a service, I should be redirected to its page, which should include my existing authorizations, integrations, and available recipes for this service. On this page, I should be able to enable/disable integrations and de-authorize the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-integrations.png&quot; alt=&quot;intro-to-integrations-integrations&quot;&gt; &lt;/p&gt;

&lt;p&gt;Then, after enabling an integration, the main integrations page should include all of my existing integrations across all services as well as the still-available services. &lt;/p&gt;

&lt;p&gt;This layout feels right to me and I couldn’t be happier with how it turned out. Let it be known that I went through a dozen layouts before arriving on this one, so it wasn’t as clear cut as it appears. While figuring out the layout, I also narrowed in on an overall design that matches the rest of Cushion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/integrations-subscriptions.png&quot; alt=&quot;integrations-subscriptions&quot;&gt; &lt;/p&gt;

&lt;p&gt;Thinking about how to display the grid of services, I decided to revisit the subscription page design. With services only needing a single action button for authorizing, I found that the block design I used for subscription plans would work perfectly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-service-blocks.png&quot; alt=&quot;intro-to-integrations-service-blocks&quot;&gt; &lt;/p&gt;

&lt;p&gt;I swapped out the plan prices with the service icons and replaced the plan names with the service names. Below each name, I included a two-word description for each service to balance everything out. If a particular service is ever down or having issues, I could re-use the ribbon alert to indicate activity if I need to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-secondary-service-block.png&quot; alt=&quot;intro-to-integrations-secondary-service-block&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also designed how services will look as I build more integrations for Cushion. For less-common services, I condensed the block, so that two services can fit aside each other in a single row.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intro-to-integrations-secondary-services.png&quot; alt=&quot;intro-to-integrations-secondary-services&quot;&gt; &lt;/p&gt;

&lt;p&gt;I’m not a fan of integrations pages that are treated like a dumping ground, with the most useful integrations buried beneath obscure services used only by one user. I’d like to establish a better hierarchy, so the primary integrations will sit at the top as square blocks. The less-common services will then rest below them in rows of two. This way, all of the integrations are available for browsing, but the more frequently-used ones will be more prominent.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I couldn’t be more excited about integrations in Cushion. I feel like every integration brings Cushion one step closer to being a household name in the freelance world. By automating the data input process with auto-import integrations, users will be able to visualize their schedule and budget with a single click. I have trouble sitting still in my seat just thinking about this!&lt;/p&gt;

&lt;p&gt;Expect to see more posts about integrations in the near future. This one originally included the authorization process and the differences between integrating with FreshBooks versus Harvest, but as you can imagine, it was a bit long-winded. Until next time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inspiration vs Imitation</title>
      <link>http://cushionapp.com/journal/inspiration-vs-imitation</link>
      <pubDate>Fri, 08 May 2015 09:16:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/inspiration-vs-imitation</guid>
      <description>&lt;p&gt;This week, a friend pointed me to a website. He didn’t say anything about the website—he just left me with the link. After visiting the website, I realized why. He didn’t need to say anything because he knew how much it would hurt to see.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I started coding at the age of 10. I built websites for my favorite video games, writing walkthroughs and listing cheat codes—assuming everyone visited my website as soon as it went live. The websites didn’t look great—they included the same “under construction” gifs and rotating 3D text that every other website had at the time. I looked at these other websites for inspiration, pulling from them what drew me in. “View source” was my textbook—a free behind-the-scenes for every website on the internet. I copy/pasted every bit of code I hadn’t seen before and tweaked it to see what else it could do. Programming was new to me and I was excited.&lt;/p&gt;

&lt;p&gt;A couple years went by and I continued to learn about programming. My mom would drive me to the book store so I could bury myself in the “Computers” section. I read as much as I could in the hour we were there, fascinated by every “Introduction to” this language and all the “Bibles” for that language. When it was time to go, I would beg and plead for the book I just &lt;em&gt;had&lt;/em&gt; to have. The book was rarely relevant to what I was coding at the time—I just didn’t understand it and that’s why I &lt;em&gt;had&lt;/em&gt; to have it. I wanted to learn.&lt;/p&gt;

&lt;p&gt;After a few trips with mom, I discovered a series of books that showcased the “masters” of my programming world. Each book included a CD with the actual work of the masters and the book would reveal the thought process and decision-making behind each piece, often including an example tutorial. These masters became my idols and I tried my best to create work as impactful as theirs was to me. I completed the tutorials and raced to show my parents—never mentioning the book, or the masters.&lt;/p&gt;

&lt;p&gt;A few more years went by and I continued to follow their work. When they launched something new, I would learn from it and try to recreate it—just to see if I could. I redesigned my website every month to include a fancy new loading screen or an animated mouse trail—similar to the ones they had, but different enough to call it my own.&lt;/p&gt;

&lt;p&gt;While many of my idols dropped off the radar over time, I continued programming. Several more years went by and I now had an entire decade under my belt. I no longer felt the need to rely on others for inspiration—I had ideas of my own. I filled my school notebooks with these new ideas, then raced home to see if they were even possible. Every night, I went back to the drawing board, hoping to come up with something that would give others the same spark that I felt in the book store.&lt;/p&gt;

&lt;p&gt;I started to receive emails from young developers, asking for advice on where to begin. I directed them to my favorite books and websites, and we stayed in contact as they learned the same way I did. From time to time, I would recognize my own style in their work—just little things, like my favorite hex color or my go-to font combination. This didn’t bother me much because I also learned by trying what others have tried. &lt;/p&gt;

&lt;p&gt;Occasionally, I would see someone go too far. I always hoped it was an honest mistake, but sometimes it wasn’t. They either thought no one would notice, or even worse, they didn’t care. Most of them didn’t realize just how small this community is or how much this action would hurt the original person. I’d try my best to warn them of the fine line between inspiration and imitation. I could only hope that they heard me.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The link I received was to another project management service. With my recent work on integrations, I thought it might be another app worth integrating with, but as soon as the website finished loading, I knew something was wrong. My heart sunk and a tidal wave of thoughts and questions hit me. I had trouble processing what I was seeing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imitation-datepicker.png&quot; alt=&quot;imitation-datepicker&quot;&gt; &lt;/p&gt;

&lt;p&gt;I saw Cushion—not the name or the idea, but an undeniable resemblance to what I’ve spent the past year designing. I couldn’t sign up for it because it’s in private beta, too, but the video revealed enough to justify a conversation. I visited the Twitter page to reach the people behind it when my heart sunk even deeper—I recognized them. &lt;/p&gt;

&lt;p&gt;They were Cushion beta users. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imitation-colorpicker.png&quot; alt=&quot;imitation-colorpicker&quot;&gt; &lt;/p&gt;

&lt;p&gt;Aside from feeling sick, I felt betrayed. Not only because they were Cushion users, but because I remembered answering numerous questions they had about how I built parts of the app. I was naive to assume they were just curious developers, but this community is built on sharing what we know. And, there’s an unspoken trust that goes along with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imitation-table.png&quot; alt=&quot;imitation-table&quot;&gt; &lt;/p&gt;

&lt;p&gt;I reached out, expecting acknowledgment and an apology, but I was met with a strong defensive stance—claims that the look is “standard design” and that Twitter Bootstrap scaled down would look the same; that the design existed before Cushion because they bought the domain name years ago; that I had no reason to be upset. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imitation-notification.png&quot; alt=&quot;imitation-notification&quot;&gt; &lt;/p&gt;

&lt;p&gt;I was upset. The similarities were too blatant to ignore, but they weren’t seeing it. They offered to change the notification after admitting it looked similar, but how could they not see everything else? In a last-ditch effort to get through to them, I asked that they at least change the parts that look identical. They said they didn’t have time to, but joked that they could hire me to do it.&lt;/p&gt;

&lt;p&gt;I was very upset. Almost an hour had gone by and nothing would change their mind. We ended the conversation. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Cushion has become my life, and I’m putting &lt;em&gt;everything&lt;/em&gt; I have into making it my career. I’ve worked tirelessly for the past 15 months to turn this idea into something real, and it’s heartbreaking to see someone claim my work as their own. &lt;/p&gt;

&lt;p&gt;Although this has been a truly emotional distraction, I’m going to continue making work that I can be proud of—because this is what I’m meant to do. I’m here for the long haul, and nothing is going to get in the way of making Cushion my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Emotional Rollercoaster</title>
      <link>http://cushionapp.com/journal/the-emotional-rollercoaster</link>
      <pubDate>Sat, 18 Apr 2015 09:32:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/the-emotional-rollercoaster</guid>
      <description>&lt;p&gt;In the past, I’ve written mostly about Cushion progress, but little about the emotional side of building an app. Re-reading a few posts, I realized that I only seem to write when I make considerable progress or when I’m excited about an upcoming feature. I never write about the darker days—when I’m feeling overwhelmed and discouraged.&lt;/p&gt;

&lt;p&gt;Bootstrapping shares a similar emotional rollercoaster to freelancing. On an up day, I might have a few dozen signups and, all-of-a-sudden, I feel unstoppable. I start thinking about hiring people and taking on less client work. I look months into the future and make projections on where Cushion will be based on that one good day.&lt;/p&gt;

&lt;p&gt;Then, I won’t see a single new signup for an entire week and that impenetrable confidence begins to waver. I start doubting that I’ll ever be able to hire the help I so desperately need. I look to take on new clients because I’m now projecting the future based on this week alone, thinking I’ll be homeless in no time. I feel like no one cares anymore because nobody mentioned Cushion that week.&lt;/p&gt;

&lt;p&gt;Like the freelancing rollercoaster, I know these ups and downs don’t go away—I just need to strengthen my ability to handle them. Instead of assuming everything will crumble after a quiet week, I should remind myself about the good things I have going. &lt;/p&gt;

&lt;p&gt;For one, Cushion is actually making money and it’s not even out of private beta yet. This is a big deal. It means that people are investing in the app before they can even use it—the idea alone simply resonates with them. I shouldn’t take this lightly. Thanks to their support, I can afford to designate entire weekdays to working on Cushion—not just nights and weekends.&lt;/p&gt;

&lt;p&gt;Another positive I often overlook is that I am capable of building Cushion on my own. With 18 years of coding and a design degree under my belt, I know there’s nothing holding me back. It &lt;em&gt;would&lt;/em&gt; be nice to have extra help, but there’s no legitimate reason why I couldn’t continue solo until I’m able to bring someone onboard. When the time is right and I can afford a teammate, I can take that next step. Until then, I have nothing blocking me.&lt;/p&gt;

&lt;p&gt;Most of all, I &lt;em&gt;need&lt;/em&gt; to do this. As soon as I thought up the idea of Cushion and witnessed the overwhelmingly positive reception from others, I knew I had to build it. Not a day goes by where I’m not thinking about Cushion. I shouldn’t take this passion for granted. I should be thankful to even have an idea worth pursuing—let alone one that helps others. I need to remind myself that I’m fortunate to have this opportunity. I can’t wait to see where Cushion takes me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If it wasn’t obvious, this post was for me. I’ve been feeling down about my work lately and I needed a release. Working alone, it’s easy to keep my thoughts to myself, but that doesn’t help. This did. Thanks for reading.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing Project Blocks</title>
      <link>http://cushionapp.com/journal/designing-project-blocks</link>
      <pubDate>Sun, 22 Mar 2015 13:28:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/designing-project-blocks</guid>
      <description>&lt;p&gt;Back in December, I &lt;a href=&quot;/journal/project-blocks&quot;&gt;wrote&lt;/a&gt; about the initial concept of “project blocks”. To summarize, this feature would be a first step towards a more detailed view in Cushion. At the time, projects only had a start and finish date, but with blocks, you’d be able to know what’s happening throughout a project. When is it most intense? When is it at a standstill? When is it focused on sketches or revisions? These are the questions I wanted to answer with project blocks.&lt;/p&gt;

&lt;p&gt;With an established design for the schedule timeline in place, I started to think about how to best integrate project blocks while staying consistent with the other visual elements. I wanted to emphasize a project’s workload when it was heavy and de-emphasize it when it barely affected my week. This lead me to pursue scale as a method for differentiating these two kinds of scenarios and everything in-between.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-03-22-timeline.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-22-timeline.png&quot; alt=&quot;2015-03-22-timeline&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the timeline, I had a lot of negative space. I had room between rows where I could utilize blocks. When a specific region of the timeline was piled high with intense projects, I wanted this area to feel congested. It should look overwhelming, so you feel more inclined to try to avoid those situations. I use this same approach with late invoices—animating the line with distracting movement to encourage users to seek closure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-03-22-project-blobs.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-22-project-blobs.png&quot; alt=&quot;2015-03-22-project-blobs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since project blocks are still an approximation, using start/end dates instead of hours, the visual shouldn’t be as exact as a hard edge. I intially worked with transparent “blobs” around projects. These gave a really good sense of intensity for a project and certainly overwhelmed me when seeing it applied to the month that caused me to start working on Cushion. This felt really good for a few days until I realized it just wasn’t right.&lt;/p&gt;

&lt;p&gt;The first clue emerged from thinking about how users would resize project blocks in the timeline. At first, I thought I’d be able to reuse the same date input fields from the project form. I thought wrong. Instantly, I felt the burden of adjusting a block. Since these are elements you’d want to tweak occasionally based on estimated date ranges, specifying exact dates made no sense. The user should be able to easily resize them by eye, through a more “hands-on” interaction, like drag and drop. This made me second-guess using blobs because&amp;hellip;where do you drag? How do you know to drag? This blob shape made more sense as a static highlight—not an interactive element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-blob-circle.png&quot; alt=&quot;2015-03-22-blob-circle&quot;&gt; &lt;/p&gt;

&lt;p&gt;The second, and more important, clue detering me from using blobs was that they were too encroaching on the horizontal space. On longterm projects, blobs looked great, but shorter projects were deceiving. For a one-day project, the blob would be a full circle, which appears to span a week on a year-long timeline. That initial decision to avoid a hard edge resulted in a bigger problem—innaccuracy. I’d much rather have an accurate visual than a better-looking lie.&lt;/p&gt;

&lt;p&gt;Since the first beta accounts were coming to an end soon, I decided to shelve project blocks for a few weeks while I worked on subscriptions. When I returned, I had a much clearer idea for approaching project blocks—using a rectangular “block” shape. It was a “duh” moment for sure, but a block shape fixed all of the existing issues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-03-22-project-blocks.png&quot;&gt;&lt;img src=&quot;/assets/2015-03-22-project-blocks.png&quot; alt=&quot;2015-03-22-project-blocks&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a hard edge, the blocks now represent an accurate date range. And, I was able to avoid an overly rigid look by rounding the corners a tad. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-heights.png&quot; alt=&quot;2015-03-22-heights&quot;&gt; &lt;/p&gt;

&lt;p&gt;Along with the horizontal issues, the blob shapes spanned both directions on the vertical axis, so similar block intensities were more difficult to distinguish from each other. Since these new blocks rested on the lines of the projects and grew in a single direction, they were much easier to compare.&lt;/p&gt;

&lt;p&gt;Moving from visuals to interaction, I worried about the drag and drop. Before actually working on the drag and drop, I was unsure how to approach it. I knew I wanted to be able to resize the edges and drag the entire block, but I also knew there’d be a slew of hurdles along the way. As soon as I started implementing it, however, the hurdles shrunk in scale. One after another, the problems I anticipated ended up much less significant than I intially imagined.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-resizing.gif&quot; alt=&quot;2015-03-22-resizing&quot;&gt; &lt;/p&gt;

&lt;p&gt;The issue of indicating to the user that they can resize a block was as easy as darkening the edges. This suggested that the edges of the block were different from the rest of it. Upon hovering the edge, the cursor changes to the horizontal resize icon, revealing to the user that they can interact with the block. Then, as they drag an edge, a small tooltip appears, marking the date that the edge represents.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-repositioning.gif&quot; alt=&quot;2015-03-22-repositioning&quot;&gt; &lt;/p&gt;

&lt;p&gt;Repositioning a block follows the same flow. Hovering the draggable area of the block switches the cursor to the drag icon, and upon dragging, a tooltip appears, marking the range of the block. For an extra touch, I added an ease to the edge positions, so whenever you release the block from resizing or repositioning, it will smoothly snap into place.&lt;/p&gt;

&lt;p&gt;Up until this point, I’ve been focusing mostly on the horizontal aspect of the blocks, but the vertical intensity is just as important. Luckily, this was much more straightforward. I figured draggable resizing of the height would be overkill because the height ranges only ~40px. Because of this, I decided to rely on the form for vertically resizing a block. &lt;/p&gt;

&lt;p&gt;Since the height of a block is directly tied to its intensity, it makes sense to use units that most freelancers are familiar with—hours and days per week. For the hourly freelancers, you can choose from 1, 4, 8, 16, 24, 32, and 40+. And for the freelancers who work on a day-rate, like myself, you can choose from 1 hour, half day, 1 day, 2 days, 3 days, 4 days, and 5+ days. I also offer a preference to use both, in case you switch based on the type of project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-dropdown.gif&quot; alt=&quot;2015-03-22-dropdown&quot;&gt; &lt;/p&gt;

&lt;p&gt;While adding the dropdown, I realized I would need to reflect a change in the timeline upon selecting a different value, so I wired the timeline to the form and animated the height of the block when updating the intensity.&lt;/p&gt;

&lt;p&gt;One piece still remained—phases. If I were to stop now, project blocks could work pretty well for most freelancers. The ability to indicate the intensity of a project goes a long way, but there’s another type of freelancer who works in terms of phases. They might start with sketches, then move onto designs, and lastly work on revisions until arriving at the final deliverable. With blocks, this is as easy as adding a label.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-03-22-phases.png&quot; alt=&quot;2015-03-22-phases&quot;&gt; &lt;/p&gt;

&lt;p&gt;In the form, I added an optional input field to label the block. Upon hovering the block in the schedule view, a tooltip appears, displaying the name of the block along with its intensity. &lt;/p&gt;

&lt;p&gt;With project blocks, Cushion adds another level of detail to your schedule—break projects into phases, differentiate a heavy project from a light one, or account for that few-month lull in the middle of that longterm project. Thinking ahead, I have a few more ideas for blocks. I won’t go into them now, but if project blocks are for visualizing estimated intensities of a project, imagine integrating them with time-trackers to measure the actual intensity. Interesting, indeed!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Everything in Increments</title>
      <link>http://cushionapp.com/journal/everything-in-increments</link>
      <pubDate>Mon, 02 Mar 2015 09:13:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/everything-in-increments</guid>
      <description>&lt;p&gt;If you’ve built anything of scale before, you know that it’s best to build in increments. Even if you haven’t built anything, but rather attempted to accomplish an overwhelming task, you know how important it is to break larger problems into smaller, more manageable ones. This has been on the top of my mind lately because it’s how I’ve had to build Cushion, and every other app—releasing in small increments, but focused on the longterm goal.&lt;/p&gt;

&lt;p&gt;Specifically, incremental building has played an essential role in how I release Cushion to more people. I’ve been especially slow and steady with this, simply because I’m in no rush. I like to react while I’m still able to breathe—it allows me to respond conscientiously rather than hastily plugging leaks. I’ve been a part of a few proper launches in the past and I want to avoid the panic and scramble of opening the flood gates all at once. Here’s how I’ve been able to do that.&lt;/p&gt;

&lt;p&gt;After spending a couple months building out the basic concept of Cushion, with the ability to add projects and see something in return, I decided it was time to put other people behind the wheel. Since I’m in a co-working space with a dozen other freelancers, I have the convenience of walking up to one of them, setting them up with an account, and seeing what happens. These were my “Alpha” users.&lt;/p&gt;

&lt;p&gt;As you can imagine, they immediately found all the painfully obvious issues with Cushion. When you work alone on something for an extended period of time, it’s easy to miss the problems that everyone else will hit on day one. Watching other people use Cushion for the first time was a test of my patience—sitting there, not interfering, just watching. We’d then discuss the problems, the possible solutions, and I’d return later that day with a new version to try out. This worked incredibly well.&lt;/p&gt;

&lt;p&gt;After a couple more months, I felt ready to move to the next step. Instead of a dozen Americans on the east coast using the app, I wanted at least a hundred people from other timezones, with other currencies and date formats. This is when you realize your app needs to be more accommodating. &lt;/p&gt;

&lt;p&gt;I needed to open the app up to others, but I knew from my own experience as a beta user that a lot of people just want to try the new thing. 5 minutes in, they can say they tried the new thing and the database becomes a graveyard of dormant accounts. I wanted users to be invested in the app and feel motivated to thoroughly use it and provide feedback. If every user paid upfront for the beta, they would be more inclined to keep with it. If it didn’t stick with them, Cushion still benefited from their financial support.&lt;/p&gt;

&lt;p&gt;The paid beta served as an amazing resource in a variety of ways. Financially, it allowed me to only need enough client work to book 3 days a week. Every other day, I was able to focus 100% on Cushion—this was huge. &lt;/p&gt;

&lt;p&gt;As anticipated, the beta users it attracted have been incredibly involved and active—over half of them use Cushion on a regular basis. Because of this, I consistently receive great feedback that I can act on.&lt;/p&gt;

&lt;p&gt;And with paid users, the requested features aren’t the typical pie-in-the-sky kind I would get from free users—they are reasonable and inline with the direction Cushion is moving in. The roadmap has been shaped into a clear path by the people actually using the app. I’m not just thinking up features and hoping potential customers might like them—real customers are telling me exactly what they want and I work with them to find the best approach to take.&lt;/p&gt;

&lt;p&gt;Now that the first beta memberships are starting to expire, I’m looking to take the next step. Thinking in increments, I found this to be a great opportunity to offer subscriptions to both expiring beta users and new users. Expiring beta users need a way to continue using Cushion regardless, so it needs to be implemented. With minimal additional effort, this can also serve a secondary purpose of subscribing new users, which will eventually be needed once Cushion is public.&lt;/p&gt;

&lt;p&gt;The idea all along has been for beta users to carry a special status among users. Since they took a leap of faith to support such early development, I plan to reward them beyond the beta with exclusive benefits. This distinction between beta users and subscribers allows me to offer monthly and yearly subscriptions to new users alongside the beta, with these subscriptions simply offering early access.&lt;/p&gt;

&lt;p&gt;As of this weekend, the monthly and yearly subscriptions are in place and ready for new users. Several weeks from now, once I’ve ironed out the subscription process, I’ll be able to take the next step and offer trial periods. Since there’s nothing holding anyone back from signing up at that point, I’ll still use an invite system to keep the traffic to a level I can manage. And from there, if I’m ready to open the flood gates, I will.&lt;/p&gt;

&lt;p&gt;As always, if you’re interested in trying out Cushion, this time as a beta user or a monthly subscriber, &lt;a href=&quot;/beta&quot;&gt;request an invite&lt;/a&gt; and I’ll send one your way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deleting Your Account</title>
      <link>http://cushionapp.com/journal/deleting-your-account</link>
      <pubDate>Sat, 14 Feb 2015 19:47:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/deleting-your-account</guid>
      <description>&lt;p&gt;This weekend, I wrapped up a “feature” that’s been at the top of my list for a while—deleting your account. It’s not an exciting feature, but certainly a necessity and one that’s very important to me. We owe it to our users to put them in complete control of their data. If they no longer want any of their data in your database, they should be able to easily delete it—not just abandon it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-02-14-tweet.png&quot; alt=&quot;2015-02-14-tweet&quot;&gt; &lt;/p&gt;

&lt;p&gt;I recently &lt;a href=&quot;https://twitter.com/destroytoday/status/563522803266502656&quot;&gt;tweeted&lt;/a&gt; about a few prerequisites I believe each app developer should build into their app before launching. I knew others felt the same, but I didn’t realize it would become my most favorited and most retweeted tweet. It’s a sign that people really care about these aspects of an app, even if they’re not the killer features one would spotlight on the product page. &lt;/p&gt;

&lt;p&gt;The ability to delete your account is especially important to me because I’ve come across so many web services that simply don’t allow it—even ones with millions of users and thousands of employees. There’s absolutely no excuse not to build support for it. In my eyes, it should be a legal requirement for anyone putting an app into the world. We’re so quick to build apps, scale them, and strive to reach exponential growth that we act like it’s a complete waste of time to spend two or three days building these features.&lt;/p&gt;

&lt;p&gt;In Cushion, I built the initial phase of a two-part plan for deleting your account. With the first beta accounts expiring soon, I needed the bare minimum in place, in case anyone wanted to call it quits. For beta users, this means simply deleting their data upon request. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-02-14-modal.gif&quot; alt=&quot;2015-02-14-modal&quot;&gt; &lt;/p&gt;

&lt;p&gt;Within the app, the user would click a link to delete their account. This opens a modal with an explanation of what deletion entails, emphasizing the seriousness of the request—in case users simply want to cancel their subscription. The modal also suggests downloading a backup beforehand. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-02-14-github.png&quot; alt=&quot;2015-02-14-github&quot;&gt; &lt;/p&gt;

&lt;p&gt;I followed Github’s model for confirmation by requiring users to type their email address to enable the delete button. With the past several apps I’ve built, I can’t tell you how many users “accidentally” deleted their account or deleted it assuming they could return a month later and just restore it. This also clarifies which account is being deleted, in case the user has more than one. I want the user to be fully aware that they are about to delete their account. &lt;/p&gt;

&lt;p&gt;Upon clicking the delete button, the user’s subscription is cancelled, if one exists, and their data is deleted. That’s phase one.&lt;/p&gt;

&lt;p&gt;The plan for phase two is to provide the most thorough experience for deleting an account, covering all angles of what may potentially happen next. In case the user forgets to download a backup, the user’s data will automatically be emailed to them upon deleting their account. If they ever attempt to log into their account again, they will find a list of downloadable receipts from Cushion charges. And, for the inevitable user wanting to restore their account shortly after deleting it, accounts will be put it in a queue to be deleted 30 days later after the request. Within those 30 days, a user can restore the account and be back to using it in no time.&lt;/p&gt;

&lt;p&gt;So far, I’m happy with the first step, but look forward to building the full package. It does feel strange investing this much time in the experience of someone leaving, but I refuse to skimp on any aspect of Cushion.&lt;/p&gt;

&lt;p&gt;The beta is still going strong, so if you’re interested in participating, even just to test out deleting your account, be sure to &lt;a href=&quot;/beta&quot;&gt;request an invite&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing the Subscription Page</title>
      <link>http://cushionapp.com/journal/designing-the-subscription-page</link>
      <pubDate>Fri, 30 Jan 2015 09:26:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/designing-the-subscription-page</guid>
      <description>&lt;p&gt;After months of thinking about “killer features”, I arrived at the realization that there were still a few launch prerequisites I hadn’t finished, or even started. Here I was, thinking up feature after feature, expecting to launch soon, but I still didn’t have a subscription system in place, a way of downloading your data, or the ability to delete your account. &lt;/p&gt;

&lt;p&gt;The paid beta runs on Stripe Checkout, using a one-time charge per user, which buys me exactly six months starting from the first user. Based on my past experience, I knew that time would dwindle and the expiration date would creep up faster than I would anticipate. I had to drop everything and focus on subscriptions.&lt;/p&gt;

&lt;p&gt;Since early on, I had a good idea of the direction I wanted to take with subscriptions. Instead of your typical 3-tier “solo, team, company”, I wanted to focus on the individual. I know I’m nowhere near even thinking about teams and beyond, so why even include them from the start? I do have a few small teams using the beta, and that works out really well with a single account holder, as long as they don’t need to do things like assign people to projects. For now, I’ll keep it simple.&lt;/p&gt;

&lt;p&gt;By starting with a single plan, I can break that into two options by providing a monthly option and then a discounted yearly option. You’d be surprised by how often a user would rather pay a little extra for the month-to-month flexibility, but then again, maybe it’s not surprising—think gym memberships. I’ve had one for close to a year, still paying more month-to-month, but that’s only because I didn’t know if I would continue to go for an entire year. Now that I continue to go on a consistent basis, I still prefer the flexibility of having a monthly plan.&lt;/p&gt;

&lt;p&gt;When it comes to web services or software, I always go for the yearly option because I know if I’ll use it or not from the trial and that 20% discount is tough to pass up on—especially when the cost isn’t that high. It’s usually only the services that range from $5-$50/month that offer the discounted annual plan, too. 10-20% off on a $100/year plan isn’t a big deal, but $100/month (or $1200/year) starts to add up. Or maybe they just know their audience—at a certain scale, the monthly flexibility provides more value.&lt;/p&gt;

&lt;p&gt;In any case, it was time to stop only thinking about the subscription page and start designing it. Like most things I design from scratch, I start with the whacky ideas, just to get them out of the way. I know I probably won’t go with most of them, but I know not to discredit anything without going through the motions—I’ve had too many good ideas spawn from horrible ideas. All you need is something to take you in a certain direction and you can end up nowhere near the original idea, but better off because of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-1.png&quot; alt=&quot;2015-01-30-design-1&quot;&gt; &lt;/p&gt;

&lt;p&gt;I tend to roll my eyes when companies get cutesy with their name, but I thought I’d at least try pursuing “Cushion” beyond the concept of a financial cushion and more towards a pile of comfortable pillows. It was bad. &lt;/p&gt;

&lt;p&gt;The layout, the size of the type, and the icons—all bad. But that’s okay because this was my first shot with a blank canvas. It takes a bit to find a solid grounding. The goofiness of the icons made its way to the plan names, as well. Instead of saying “Monthly” and “Yearly”, I tried the playful angle, describing the user’s potential scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-2.png&quot; alt=&quot;2015-01-30-design-2&quot;&gt; &lt;/p&gt;

&lt;p&gt;From there, I moved to the expected 3-column layout with the middle one being emphasized. I also introduced a third plan for an idea I’ve had for a few years now—a service only available within a specific timeframe. The service was originally going to be for people who work on personal projects at night, but this seemed like an interesting option for full-time people who freelance at night.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-3.png&quot; alt=&quot;2015-01-30-design-3&quot;&gt; &lt;/p&gt;

&lt;p&gt;I tried a few other variations of this layout, like reversing the fills&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-4.png&quot; alt=&quot;2015-01-30-design-4&quot;&gt; &lt;/p&gt;

&lt;p&gt;&amp;hellip;using outlines instead of solid fills&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-5.png&quot; alt=&quot;2015-01-30-design-5&quot;&gt; &lt;/p&gt;

&lt;p&gt;&amp;hellip;and introducing color. None of these were right. For one, the plans were just confusing—you really needed to read into them to see that they were actually monthly versus yearly. The icons were also too playful for Cushion and just&amp;hellip;bad. I was too hung up on having a moon icon that I forced the other two. Also, it wasn’t clear that the middle icon is a “husband” cushion and the one on the right is a neck pillow. It’s like I’m trying to tell an inside joke to a group of strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-6.png&quot; alt=&quot;2015-01-30-design-6&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I tried a two-column layout with the third “misfit” plan underneath. I also called the plans what they were, “Monthly” and “Yearly”, and removed the pillow icons. Immediately, it felt clearer, but still not right. The “Moonlighter” plan stood out too much for a plan that I didn’t want to emphasize. I was too hung up on how cool a “night” plan and that damn moon icon!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-7.png&quot; alt=&quot;2015-01-30-design-7&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also tried a variation of this design using yearly amounts for yearly plans. I thought this would be more upfront about the real cost of each plan, but it just made them more confusing. $10 vs $96 made it seem like the monthly plan was the discounted one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-8.png&quot; alt=&quot;2015-01-30-design-8&quot;&gt; &lt;/p&gt;

&lt;p&gt;Because the two-column layout would be too narrow in the context of the app’s subscription page, I decided to move back to the 3-column design. I kept the moon icon to see if I could somehow make it work and added the yearly price to the one-liner of the yearly plan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-9.png&quot; alt=&quot;2015-01-30-design-9&quot;&gt; &lt;/p&gt;

&lt;p&gt;The yellow of the moon on white didn’t work, so I tried the dark background again—still too much emphasis. It looks so cool, though!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-10.png&quot; alt=&quot;2015-01-30-design-10&quot;&gt;&lt;/p&gt;

&lt;p&gt;At this point, I took a step back and reminded myself that this first design is for within the app, under the subscription tab. I don’t need to be so heavy on the marketing side—it should just be an area to switch between subscriptions. Even though I think it’s a worthy concept, I decided to hold off on the “Moonlighter” plan for now. I need to work in increments rather than force all my ideas in at once. I swapped out the “Moonlighter” plan for the beta, since every user is a part of the beta. From there, they can upgrade or let the beta expire.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-11.png&quot; alt=&quot;2015-01-30-design-11&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also decided to add “ribbons” to selected plans, indicating when a plan’s subscription begins, renews, or ends. Whenever you’re dealing with payment-related parts of an app, it’s best to inform the user as much as possible about their current state. I want to do as much as I can to keep users from contacting support for questions that could easily be answered with a helpful UI, especially as a solo developer.&lt;/p&gt;

&lt;div class=&#39;video-outer&#39;&gt;
    &lt;div class=&#39;video-inner&#39; style=&#39;padding-bottom: 34%&#39;&gt;
        &lt;video width=&quot;100%&quot; poster=&quot;/assets/2015-01-30-design.png&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot; tabindex=&quot;0&quot;&gt;
            &lt;source src=&quot;/assets/2015-01-30-design.mp4&quot; type=&quot;video/mp4&quot; /&gt;
            &lt;source src=&quot;/assets/2015-01-30-design.ogv&quot; type=&quot;video/ogg&quot; /&gt;
            Video tag not supported. Download the video &lt;a href=&quot;/assets/2015-01-30-design.mp4&quot;&gt;here&lt;/a&gt;.
        &lt;/video&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, this is where I ended up. I’m really happy with the end result and glad I got the wackiness out of my head. The next step now, regarding subscriptions, is to design the public-facing plan page. This will need to be more than just a copy/paste job, as it has to include a list of features and FAQs, considering the potential user hasn’t used the app yet. That’s for another time, though.&lt;/p&gt;

&lt;p&gt;On a side note, I still have a few more spots in the paid beta. If you’re interested in participating, &lt;a href=&quot;/beta&quot;&gt;request an invite&lt;/a&gt; and I’ll send one your way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rewriting the Timeline</title>
      <link>http://cushionapp.com/journal/rewriting-the-timeline</link>
      <pubDate>Tue, 06 Jan 2015 09:25:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/rewriting-the-timeline</guid>
      <description>&lt;p&gt;Back in December, I went down the long list of to-dos for Cushion and thought I’d tackle one I’ve wanted for a while now—&lt;a href=&quot;/journal/2012-12-02/&quot;&gt;project blocks&lt;/a&gt;. I wrote about this before and laughably estimated a few days to finish it. Any dev knows estimates are meaningless and any guess would require multiplying the original estimate several times. &lt;/p&gt;

&lt;p&gt;So here we are. It’s January and Cushion doesn’t have project blocks yet. I’m about halfway there because a few days in, I realized if I wanted to do this right, I would need to rewrite the schedule timeline. I originally wrote it for the budget, then made it work for scheduling, redesigned it a few times, added a few more elements, and rigged it to somehow work with invoices. I was left with a monster that looked nice, but felt like a long-running Jenga game. &lt;/p&gt;

&lt;p&gt;After hours of just staring at the screen, internally debating with myself, I knew rewriting the timeline was the only way. I started thinking about what the timeline even represented, now that I was months along with the beta. Does the name still make sense? Up until now, I considered anything in the top-half of Cushion to be “the timeline”—even the budget bar was a timeline to me, despite its lack of time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-graph.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-graph.png&quot; alt=&quot;2015-01-06-graph&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This wasn’t right. I took a step back and pretended for a moment that I haven’t been working on Cushion for almost a year now. I looked at the scheduling timeline and pieced it apart. What were its components, if one were to separate it into reusable parts? It has “ticks”, or axes, at the top and bottom, but so does the budget bar. So, then the ticks shouldn’t be considered part of the timeline. I would need to step back even further.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-timeline.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-timeline.png&quot; alt=&quot;2015-01-06-timeline&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remove the ticks, remove the container, and you have the timeline on its own. And, the budget bar without the ticks and container is just the bar. Both of these are just visuals that could stand on their own, but are even more useful when adding the grounding and labeling of the container and ticks. It’s almost like a graph&amp;hellip; Wait, it is a graph! A graph has axes and visuals—so do the schedule timeline and budget bar. I can’t believe I didn’t see it this way at first, but once I did, everything came together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-shapes.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-shapes.png&quot; alt=&quot;2015-01-06-shapes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of giving meaning to everything in the timeline, like outlined dots for estimated dates and solid dots for actual dates, I would remove the context completely and treat it like a real graph. These dots are just dots with an x-position—nothing more. An outlined dot is a “weak” dot; a solid dot is a “strong” dot. The lines that were once named after their data, like duration, delay, drag, etc., are now just lines with an x-position and a length. The arrows that once represented the current date of an active project now have no idea they represent anything—they’re just arrows. &lt;/p&gt;

&lt;p&gt;The more I abstracted the timeline, the easier it became to write both the logic and the styling. Previously, I had tons of CSS classes, like &lt;code&gt;.estimated-start-dot&lt;/code&gt; and &lt;code&gt;.remaining-duration-line&lt;/code&gt;—many of which shared the same qualities, like both delayed projects and early invoices being a light line. Now I didn’t need to be that descriptive. As a result, the style code was reduced to a fraction of what is was before.&lt;/p&gt;

&lt;p&gt;Instead of bundling all the logic within the timeline, I pulled it all out and left the timeline with one job—draw. I would no longer feed it projects and invoices. I would just send it points. Then, outside the timeline, the real logic would live in factories and generate the points for the timeline. The timeline now has absolutely no concept of anything besides drawing shapes between two points and I can easily swap out the data I send it between clients, projects, and invoices. &lt;/p&gt;

&lt;p&gt;I know abstraction is programming 101, but when you start a project and rapidly develop it as the idea grows, it’s hard to predict where the project is going. It’s even harder to take time to step back and reassess everything. I got to the point where the only way to proceed without a constant headache would be to rewrite the timeline. &lt;/p&gt;

&lt;p&gt;Looking back, as soon as I decided I would need a second timeline for invoices, I should’ve stopped and realized I shouldn’t try to make the timeline do everything. It became too much and resulted in me unexpectedly losing a couple weeks of forward progress. On the bright side, I now have a solid system in place for future “graphs”. Schedule timelines and budget bars are just the beginning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Restructuring the Individual Project Page</title>
      <link>http://cushionapp.com/journal/restructuring-the-individual-project-page</link>
      <pubDate>Wed, 10 Dec 2014 09:22:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/restructuring-the-individual-project-page</guid>
      <description>&lt;p&gt;In the &lt;a href=&quot;/journal/2012-12-02/&quot;&gt;last post&lt;/a&gt;, I wrote about the plan to introduce project blocks—a way to divide projects into smaller segments that could represent phases or show the varying intensity throughout a project. This plan assumed that all the groundwork had been done and I could just implement the feature. Not so fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-old-project-page.png&quot; alt=&quot;2014-10-10-old-project-page&quot;&gt; &lt;/p&gt;

&lt;p&gt;As soon as I finished writing the post and started working on project blocks, I realized that Cushion would need considerable restructuring—specifically, on the individual project page. At the time, clicking a project link would take you directly to the form to edit the project. The project’s invoices were below the form and this always bothered me because I knew that if I ever added one more piece, this page would be too overwhelming to keep as one.&lt;/p&gt;

&lt;p&gt;The time had come. With project blocks, I had a new resource to consider, like invoices in the budget view. This association actually introduced a clear direction to take with restructuring. If the budgeting view has invoices, then the scheduling view could have blocks.&lt;/p&gt;

&lt;p&gt;Early on, I knew it would be useful to carry the budget/schedule views into individual pages, but the question of how to handle the form always remained the issue. Now that I had more useful information to display, like delay, drag, and estimate difference, I could easily populate a couple more pages and extract the form as its own page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-edit-link.png&quot; alt=&quot;2014-10-10-edit-link&quot;&gt; &lt;/p&gt;

&lt;p&gt;The structure was crystal clear. Clicking a project link would take you to the project, but maintain the view you are in—schedule or budget. Then, within either of those pages, you could click an “edit project” link, which would take you to the project’s edit page. Even though this is an extra click to edit the project, it’s apparent that the majority of users don’t edit a project much beyond marking it as finished.&lt;/p&gt;

&lt;p&gt;Now that I had the structure in place, what would I put in the scheduling and budgeting views? I had a good amount of data to choose from, but really needed to narrow it down. I didn’t want each page to become another overwhelming mess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-data.png&quot; alt=&quot;2014-10-10-budget-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;The budget view was easier because I had less data points to work with and they were all currency-based. I could leave the income estimate as-is because it has enough value on its own. For the invoice amounts, I already had the paid total and invoiced total below each invoice table, so an obvious higher-level piece of data would simply be a total of all the invoices. If the user needs to dig deeper, they can just scroll down to the tables.&lt;/p&gt;

&lt;p&gt;Lastly, I re-introduced the estimate difference. I previously had this on the projects page, but felt that it detracted from the summary feel—it was too detailed a value to show in a list of projects. With just one project to focus on, however, it’s perfect. This time, I wasn’t limited for room, so I maintained the currency format for the main estimate difference value and calculated its percentage as a less-emphasized value below it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-timeline.png&quot; alt=&quot;2014-10-10-budget-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;As for the budget timeline, I realized I could take this opportunity to provide much more value to the user by forgeting the financial goals of the current timeline. Instead, I could use the project’s estimate as the goal and fill up the bar with its individual invoices. This would allow the user to see a more segmented view of the income and click into each invoice if a change were needed. For the timeline labels, I use the invoice number. If one doesn’t exist, I fall back to its date—either the issued date for unpaid invoices or the paid date for paid invoices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-view.png&quot; alt=&quot;2014-10-10-budget-view&quot;&gt; &lt;/p&gt;

&lt;p&gt;To wrap it all together, above is the final budget view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-schedule-data.png&quot; alt=&quot;2014-10-10-schedule-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;The schedule view wasn’t nearly as easy to lay out, but I knew I had to at least show the delay, drag, and duration. That didn’t leave me with much room for more, so I took advantage of the scenarios when no data existed for these values. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-estimated-start.png&quot; alt=&quot;2014-10-10-estimated-start&quot;&gt; &lt;/p&gt;

&lt;p&gt;If a project hasn’t started, its delay cannot be calculated, so I leave a dash in its place. Same goes for unfinished projects with drag and duration. Because a dash barely takes up any space, I know for sure I have enough room for an extra column.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-estimated-finish.png&quot; alt=&quot;2014-10-10-estimated-finish&quot;&gt; &lt;/p&gt;

&lt;p&gt;The benefit of this extra column makes absolute sense, too—it’s not just a space to shove more data. Considering the column will only appear for unstarted or unfinished projects, I can show the estimated start date for unstarted projects and the estimated finish date for unfinished projects. If I’m waiting on a project to start, I want to know when it might start and if I’m in the thick of things with an existing project, I want to know when it’s expected to wrap up.&lt;/p&gt;

&lt;p&gt;With a small last touch, I took advantage of using a secondary value once again to show the date range of a finished project just below its duration. Now a user can look at one place on the screen and see when a project started, when it ended, and how long it took.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-schedule-timeline.png&quot; alt=&quot;2014-10-10-schedule-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;As for the schedule timeline, I wanted to show the entirety of the project, but knew the existing design would be humorously small on its own. Luckily, I’ve been working with EMs the whole time, so I was able to double the font size of the timeline and everything scaled perfectly. I also vertically aligned the project, since I knew I wouldn’t need to stack anything on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-blocks.png&quot; alt=&quot;2014-10-10-blocks&quot;&gt; &lt;/p&gt;

&lt;p&gt;Above is the final schedule view along with the upcoming project blocks. I’m not 100% finished, but far enough along that I’m excited to show it off.&lt;/p&gt;

&lt;p&gt;If you’re still reading this and interested in participating in the Cushion beta, you can request an invite &lt;a href=&quot;/beta&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Blocks</title>
      <link>http://cushionapp.com/journal/project-blocks</link>
      <pubDate>Tue, 02 Dec 2014 10:32:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/project-blocks</guid>
      <description>&lt;p&gt;I realized I’ve been writing after-the-fact lately—reviewing past work instead of talking through upcoming features I need to tackle. Today, I’m going to focus on what’s next for Cushion. &lt;/p&gt;

&lt;p&gt;Up until now, Cushion has been very much an overview of the project schedule. You specify estimated start and end dates along with actual start and end dates, then Cushion draws it on the timeline and tells you more about the edges—whether the project was delayed or if it dragged on too long. But, what about the in-between? &lt;/p&gt;

&lt;p&gt;There are three things to look at. 1) What’s the intensity of the project?—is it 24/7 startup hours or only a few days a week? 2) Does the project have a consistent schedule or are there gaps where you’re waiting on the client? 3) Does the project go from start to finish or does it have phases? The problem with the current timeline lies in the latter half of these scenarios. The visuals lead you to believe that every project is full-time. &lt;/p&gt;

&lt;p&gt;This innaccuracy kills me, and it goes against one of Cushion’s underlying principles—don’t rely on the user to calculate. Too many services display data and leave it up to the user to find the valuable conclusions. With Cushion, I want the user to take one look and instantly experience that ah-ha moment.&lt;/p&gt;

&lt;p&gt;So, what’s my solution to all of this? I call them “Project Blocks”. Let’s say you create a new project. By default, this project starts with one block spanning the entire project. You can then add more blocks based on your situation. If you’re an illustrator, you can create several new blocks and label them “Sketches”, “Revisions”, and “Final”. If you’re a developer with gaps in the timeline between sprints, you can create blocks to indicate when you’re actually working.&lt;/p&gt;

&lt;p&gt;This idea has been in the back of my head for a few months now, so I’m really excited to dive into it. I’ll start on initial designs today and transition into dev before the week is out. If you have any thoughts of your own, I’d love to &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;hear&lt;/a&gt; them. And, if you’re interested in trying out project blocks before anyone else, &lt;a href=&quot;/beta&quot;&gt;sign up&lt;/a&gt; for the beta.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

