<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Cushion</title>
    <link>http://cushionapp.com</link>
    <pubDate>Fri, 30 Jan 2015 19:32:27 +0000</pubDate>
    
    <item>
      <title>Designing the Subscription Page</title>
      <link>http://cushionapp.com/journal/designing-the-subscription-page</link>
      <pubDate>Fri, 30 Jan 2015 09:26:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/designing-the-subscription-page</guid>
      <description>&lt;p&gt;After months of thinking about “killer features”, I arrived at the realization that there were still a few launch prerequisites I hadn’t finished, or even started. Here I was, thinking up feature after feature, expecting to launch soon, but I still didn’t have a subscription system in place, a way of downloading your data, or the ability to delete your account. &lt;/p&gt;

&lt;p&gt;The paid beta runs on Stripe Checkout, using a one-time charge per user, which buys me exactly six months starting from the first user. Based on my past experience, I knew that time would dwindle and the expiration date would creep up faster than I would anticipate. I had to drop everything and focus on subscriptions.&lt;/p&gt;

&lt;p&gt;Since early on, I had a good idea of the direction I wanted to take with subscriptions. Instead of your typical 3-tier “solo, team, company”, I wanted to focus on the individual. I know I’m nowhere near even thinking about teams and beyond, so why even include them from the start? I do have a few small teams using the beta, and that works out really well with a single account holder, as long as they don’t need to do things like assign people to projects. For now, I’ll keep it simple.&lt;/p&gt;

&lt;p&gt;By starting with a single plan, I can break that into two options by providing a monthly option and then a discounted yearly option. You’d be surprised by how often a user would rather pay a little extra for the month-to-month flexibility, but then again, maybe it’s not surprising—think gym memberships. I’ve had one for close to a year, still paying more month-to-month, but that’s only because I didn’t know if I would continue to go for an entire year. Now that I continue to go on a consistent basis, I still prefer the flexibility of having a monthly plan.&lt;/p&gt;

&lt;p&gt;When it comes to web services or software, I always go for the yearly option because I know if I’ll use it or not from the trial and that 20% discount is tough to pass up on—especially when the cost isn’t that high. It’s usually only the services that range from $5-$50/month that offer the discounted annual plan, too. 10-20% off on a $100/year plan isn’t a big deal, but $100/month (or $1200/year) starts to add up. Or maybe they just know their audience—at a certain scale, the monthly flexibility provides more value.&lt;/p&gt;

&lt;p&gt;In any case, it was time to stop only thinking about the subscription page and start designing it. Like most things I design from scratch, I start with the whacky ideas, just to get them out of the way. I know I probably won’t go with most of them, but I know not to discredit anything without going through the motions—I’ve had too many good ideas spawn from horrible ideas. All you need is something to take you in a certain direction and you can end up nowhere near the original idea, but better off because of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-1.png&quot; alt=&quot;2015-01-30-design-1&quot;&gt; &lt;/p&gt;

&lt;p&gt;I tend to roll my eyes when companies get cutesy with their name, but I thought I’d at least try pursuing “Cushion” beyond the concept of a financial cushion and more towards a pile of comfortable pillows. It was bad. &lt;/p&gt;

&lt;p&gt;The layout, the size of the type, and the icons—all bad. But that’s okay because this was my first shot with a blank canvas. It takes a bit to find a solid grounding. The goofiness of the icons made its way to the plan names, as well. Instead of saying “Monthly” and “Yearly”, I tried the playful angle, describing the user’s potential scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-2.png&quot; alt=&quot;2015-01-30-design-2&quot;&gt; &lt;/p&gt;

&lt;p&gt;From there, I moved to the expected 3-column layout with the middle one being emphasized. I also introduced a third plan for an idea I’ve had for a few years now—a service only available within a specific timeframe. The service was originally going to be for people who work on personal projects at night, but this seemed like an interesting option for full-time people who freelance at night.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-3.png&quot; alt=&quot;2015-01-30-design-3&quot;&gt; &lt;/p&gt;

&lt;p&gt;I tried a few other variations of this layout, like reversing the fills&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-4.png&quot; alt=&quot;2015-01-30-design-4&quot;&gt; &lt;/p&gt;

&lt;p&gt;&amp;hellip;using outlines instead of solid fills&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-5.png&quot; alt=&quot;2015-01-30-design-5&quot;&gt; &lt;/p&gt;

&lt;p&gt;&amp;hellip;and introducing color. None of these were right. For one, the plans were just confusing—you really needed to read into them to see that they were actually monthly versus yearly. The icons were also too playful for Cushion and just&amp;hellip;bad. I was too hung up on having a moon icon that I forced the other two. Also, it wasn’t clear that the middle icon is a “husband” cushion and the one on the right is a neck pillow. It’s like I’m trying to tell an inside joke to a group of strangers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-6.png&quot; alt=&quot;2015-01-30-design-6&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I tried a two-column layout with the third “misfit” plan underneath. I also called the plans what they were, “Monthly” and “Yearly”, and removed the pillow icons. Immediately, it felt clearer, but still not right. The “Moonlighter” plan stood out too much for a plan that I didn’t want to emphasize. I was too hung up on how cool a “night” plan and that damn moon icon!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-7.png&quot; alt=&quot;2015-01-30-design-7&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also tried a variation of this design using yearly amounts for yearly plans. I thought this would be more upfront about the real cost of each plan, but it just made them more confusing. $10 vs $96 made it seem like the monthly plan was the discounted one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-8.png&quot; alt=&quot;2015-01-30-design-8&quot;&gt; &lt;/p&gt;

&lt;p&gt;Because the two-column layout would be too narrow in the context of the app’s subscription page, I decided to move back to the 3-column design. I kept the moon icon to see if I could somehow make it work and added the yearly price to the one-liner of the yearly plan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-9.png&quot; alt=&quot;2015-01-30-design-9&quot;&gt; &lt;/p&gt;

&lt;p&gt;The yellow of the moon on white didn’t work, so I tried the dark background again—still too much emphasis. It looks so cool, though!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-10.png&quot; alt=&quot;2015-01-30-design-10&quot;&gt;&lt;/p&gt;

&lt;p&gt;At this point, I took a step back and reminded myself that this first design is for within the app, under the subscription tab. I don’t need to be so heavy on the marketing side—it should just be an area to switch between subscriptions. Even though I think it’s a worthy concept, I decided to hold off on the “Moonlighter” plan for now. I need to work in increments rather than force all my ideas in at once. I swapped out the “Moonlighter” plan for the beta, since every user is a part of the beta. From there, they can upgrade or let the beta expire.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2015-01-30-design-11.png&quot; alt=&quot;2015-01-30-design-11&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also decided to add “ribbons” to selected plans, indicating when a plan’s subscription begins, renews, or ends. Whenever you’re dealing with payment-related parts of an app, it’s best to inform the user as much as possible about their current state. I want to do as much as I can to keep users from contacting support for questions that could easily be answered with a helpful UI, especially as a solo developer.&lt;/p&gt;

&lt;div class='video-outer'&gt;
    &lt;div class='video-inner' style='padding-bottom: 34%'&gt;
        &lt;video width=&quot;100%&quot; poster=&quot;/assets/2015-01-30-design.png&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot; tabindex=&quot;0&quot;&gt;
            &lt;source src=&quot;/assets/2015-01-30-design.mp4&quot; type=&quot;video/mp4&quot; /&gt;
            &lt;source src=&quot;/assets/2015-01-30-design.ogv&quot; type=&quot;video/ogg&quot; /&gt;
            Video tag not supported. Download the video &lt;a href=&quot;/assets/2015-01-30-design.mp4&quot;&gt;here&lt;/a&gt;.
        &lt;/video&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So, this is where I ended up. I’m really happy with the end result and glad I got the wackiness out of my head. The next step now, regarding subscriptions, is to design the public-facing plan page. This will need to be more than just a copy/paste job, as it has to include a list of features and FAQs, considering the potential user hasn’t used the app yet. That’s for another time, though.&lt;/p&gt;

&lt;p&gt;On a side note, I still have a few more spots in the paid beta. If you’re interested in participating, &lt;a href=&quot;/beta&quot;&gt;request an invite&lt;/a&gt; and I’ll send one your way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Worker Server</title>
      <link>http://cushionapp.com/expenses/web-worker-server</link>
      <pubDate>Thu, 29 Jan 2015 11:17:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/web-worker-server</guid>
      <description></description>
    </item>
    
    <item>
      <title>Code Review</title>
      <link>http://cushionapp.com/expenses/code-review</link>
      <pubDate>Tue, 13 Jan 2015 15:39:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/code-review</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rewriting the Timeline</title>
      <link>http://cushionapp.com/journal/2015-01-06</link>
      <pubDate>Tue, 06 Jan 2015 09:25:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2015-01-06</guid>
      <description>&lt;p&gt;Back in December, I went down the long list of to-dos for Cushion and thought I’d tackle one I’ve wanted for a while now—&lt;a href=&quot;/journal/2012-12-02/&quot;&gt;project blocks&lt;/a&gt;. I wrote about this before and laughably estimated a few days to finish it. Any dev knows estimates are meaningless and any guess would require multiplying the original estimate several times. &lt;/p&gt;

&lt;p&gt;So here we are. It’s January and Cushion doesn’t have project blocks yet. I’m about halfway there because a few days in, I realized if I wanted to do this right, I would need to rewrite the schedule timeline. I originally wrote it for the budget, then made it work for scheduling, redesigned it a few times, added a few more elements, and rigged it to somehow work with invoices. I was left with a monster that looked nice, but felt like a long-running Jenga game. &lt;/p&gt;

&lt;p&gt;After hours of just staring at the screen, internally debating with myself, I knew rewriting the timeline was the only way. I started thinking about what the timeline even represented, now that I was months along with the beta. Does the name still make sense? Up until now, I considered anything in the top-half of Cushion to be “the timeline”—even the budget bar was a timeline to me, despite its lack of time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-graph.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-graph.png&quot; alt=&quot;2015-01-06-graph&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This wasn’t right. I took a step back and pretended for a moment that I haven’t been working on Cushion for almost a year now. I looked at the scheduling timeline and pieced it apart. What were its components, if one were to separate it into reusable parts? It has “ticks”, or axes, at the top and bottom, but so does the budget bar. So, then the ticks shouldn’t be considered part of the timeline. I would need to step back even further.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-timeline.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-timeline.png&quot; alt=&quot;2015-01-06-timeline&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remove the ticks, remove the container, and you have the timeline on its own. And, the budget bar without the ticks and container is just the bar. Both of these are just visuals that could stand on their own, but are even more useful when adding the grounding and labeling of the container and ticks. It’s almost like a graph&amp;hellip; Wait, it is a graph! A graph has axes and visuals—so do the schedule timeline and budget bar. I can’t believe I didn’t see it this way at first, but once I did, everything came together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2015-01-06-shapes.png&quot;&gt;&lt;img src=&quot;/assets/2015-01-06-shapes.png&quot; alt=&quot;2015-01-06-shapes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of giving meaning to everything in the timeline, like outlined dots for estimated dates and solid dots for actual dates, I would remove the context completely and treat it like a real graph. These dots are just dots with an x-position—nothing more. An outlined dot is a “weak” dot; a solid dot is a “strong” dot. The lines that were once named after their data, like duration, delay, drag, etc., are now just lines with an x-position and a length. The arrows that once represented the current date of an active project now have no idea they represent anything—they’re just arrows. &lt;/p&gt;

&lt;p&gt;The more I abstracted the timeline, the easier it became to write both the logic and the styling. Previously, I had tons of CSS classes, like &lt;code&gt;.estimated-start-dot&lt;/code&gt; and &lt;code&gt;.remaining-duration-line&lt;/code&gt;—many of which shared the same qualities, like both delayed projects and early invoices being a light line. Now I didn’t need to be that descriptive. As a result, the style code was reduced to a fraction of what is was before.&lt;/p&gt;

&lt;p&gt;Instead of bundling all the logic within the timeline, I pulled it all out and left the timeline with one job—draw. I would no longer feed it projects and invoices. I would just send it points. Then, outside the timeline, the real logic would live in factories and generate the points for the timeline. The timeline now has absolutely no concept of anything besides drawing shapes between two points and I can easily swap out the data I send it between clients, projects, and invoices. &lt;/p&gt;

&lt;p&gt;I know abstraction is programming 101, but when you start a project and rapidly develop it as the idea grows, it’s hard to predict where the project is going. It’s even harder to take time to step back and reassess everything. I got to the point where the only way to proceed without a constant headache would be to rewrite the timeline. &lt;/p&gt;

&lt;p&gt;Looking back, as soon as I decided I would need a second timeline for invoices, I should’ve stopped and realized I shouldn’t try to make the timeline do everything. It became too much and resulted in me unexpectedly losing a couple weeks of forward progress. On the bright side, I now have a solid system in place for future “graphs”. Schedule timelines and budget bars are just the beginning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Restructuring the Individual Project Page</title>
      <link>http://cushionapp.com/journal/2014-12-10</link>
      <pubDate>Wed, 10 Dec 2014 09:22:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-12-10</guid>
      <description>&lt;p&gt;In the &lt;a href=&quot;/journal/2012-12-02/&quot;&gt;last post&lt;/a&gt;, I wrote about the plan to introduce project blocks—a way to divide projects into smaller segments that could represent phases or show the varying intensity throughout a project. This plan assumed that all the groundwork had been done and I could just implement the feature. Not so fast.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-old-project-page.png&quot; alt=&quot;2014-10-10-old-project-page&quot;&gt; &lt;/p&gt;

&lt;p&gt;As soon as I finished writing the post and started working on project blocks, I realized that Cushion would need considerable restructuring—specifically, on the individual project page. At the time, clicking a project link would take you directly to the form to edit the project. The project’s invoices were below the form and this always bothered me because I knew that if I ever added one more piece, this page would be too overwhelming to keep as one.&lt;/p&gt;

&lt;p&gt;The time had come. With project blocks, I had a new resource to consider, like invoices in the budget view. This association actually introduced a clear direction to take with restructuring. If the budgeting view has invoices, then the scheduling view could have blocks.&lt;/p&gt;

&lt;p&gt;Early on, I knew it would be useful to carry the budget/schedule views into individual pages, but the question of how to handle the form always remained the issue. Now that I had more useful information to display, like delay, drag, and estimate difference, I could easily populate a couple more pages and extract the form as its own page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-edit-link.png&quot; alt=&quot;2014-10-10-edit-link&quot;&gt; &lt;/p&gt;

&lt;p&gt;The structure was crystal clear. Clicking a project link would take you to the project, but maintain the view you are in—schedule or budget. Then, within either of those pages, you could click an “edit project” link, which would take you to the project’s edit page. Even though this is an extra click to edit the project, it’s apparent that the majority of users don’t edit a project much beyond marking it as finished.&lt;/p&gt;

&lt;p&gt;Now that I had the structure in place, what would I put in the scheduling and budgeting views? I had a good amount of data to choose from, but really needed to narrow it down. I didn’t want each page to become another overwhelming mess.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-data.png&quot; alt=&quot;2014-10-10-budget-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;The budget view was easier because I had less data points to work with and they were all currency-based. I could leave the income estimate as-is because it has enough value on its own. For the invoice amounts, I already had the paid total and invoiced total below each invoice table, so an obvious higher-level piece of data would simply be a total of all the invoices. If the user needs to dig deeper, they can just scroll down to the tables.&lt;/p&gt;

&lt;p&gt;Lastly, I re-introduced the estimate difference. I previously had this on the projects page, but felt that it detracted from the summary feel—it was too detailed a value to show in a list of projects. With just one project to focus on, however, it’s perfect. This time, I wasn’t limited for room, so I maintained the currency format for the main estimate difference value and calculated its percentage as a less-emphasized value below it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-timeline.png&quot; alt=&quot;2014-10-10-budget-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;As for the budget timeline, I realized I could take this opportunity to provide much more value to the user by forgeting the financial goals of the current timeline. Instead, I could use the project’s estimate as the goal and fill up the bar with its individual invoices. This would allow the user to see a more segmented view of the income and click into each invoice if a change were needed. For the timeline labels, I use the invoice number. If one doesn’t exist, I fall back to its date—either the issued date for unpaid invoices or the paid date for paid invoices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-budget-view.png&quot; alt=&quot;2014-10-10-budget-view&quot;&gt; &lt;/p&gt;

&lt;p&gt;To wrap it all together, above is the final budget view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-schedule-data.png&quot; alt=&quot;2014-10-10-schedule-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;The schedule view wasn’t nearly as easy to lay out, but I knew I had to at least show the delay, drag, and duration. That didn’t leave me with much room for more, so I took advantage of the scenarios when no data existed for these values. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-estimated-start.png&quot; alt=&quot;2014-10-10-estimated-start&quot;&gt; &lt;/p&gt;

&lt;p&gt;If a project hasn’t started, its delay cannot be calculated, so I leave a dash in its place. Same goes for unfinished projects with drag and duration. Because a dash barely takes up any space, I know for sure I have enough room for an extra column.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-estimated-finish.png&quot; alt=&quot;2014-10-10-estimated-finish&quot;&gt; &lt;/p&gt;

&lt;p&gt;The benefit of this extra column makes absolute sense, too—it’s not just a space to shove more data. Considering the column will only appear for unstarted or unfinished projects, I can show the estimated start date for unstarted projects and the estimated finish date for unfinished projects. If I’m waiting on a project to start, I want to know when it might start and if I’m in the thick of things with an existing project, I want to know when it’s expected to wrap up.&lt;/p&gt;

&lt;p&gt;With a small last touch, I took advantage of using a secondary value once again to show the date range of a finished project just below its duration. Now a user can look at one place on the screen and see when a project started, when it ended, and how long it took.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-schedule-timeline.png&quot; alt=&quot;2014-10-10-schedule-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;As for the schedule timeline, I wanted to show the entirety of the project, but knew the existing design would be humorously small on its own. Luckily, I’ve been working with EMs the whole time, so I was able to double the font size of the timeline and everything scaled perfectly. I also vertically aligned the project, since I knew I wouldn’t need to stack anything on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-10-blocks.png&quot; alt=&quot;2014-10-10-blocks&quot;&gt; &lt;/p&gt;

&lt;p&gt;Above is the final schedule view along with the upcoming project blocks. I’m not 100% finished, but far enough along that I’m excited to show it off.&lt;/p&gt;

&lt;p&gt;If you’re still reading this and interested in participating in the Cushion beta, you can request an invite &lt;a href=&quot;/beta&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Blocks</title>
      <link>http://cushionapp.com/journal/2012-12-02</link>
      <pubDate>Tue, 02 Dec 2014 10:32:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2012-12-02</guid>
      <description>&lt;p&gt;I realized I’ve been writing after-the-fact lately—reviewing past work instead of talking through upcoming features I need to tackle. Today, I’m going to focus on what’s next for Cushion. &lt;/p&gt;

&lt;p&gt;Up until now, Cushion has been very much an overview of the project schedule. You specify estimated start and end dates along with actual start and end dates, then Cushion draws it on the timeline and tells you more about the edges—whether the project was delayed or if it dragged on too long. But, what about the in-between? &lt;/p&gt;

&lt;p&gt;There are three things to look at. 1) What’s the intensity of the project?—is it 24/7 startup hours or only a few days a week? 2) Does the project have a consistent schedule or are there gaps where you’re waiting on the client? 3) Does the project go from start to finish or does it have phases? The problem with the current timeline lies in the latter half of these scenarios. The visuals lead you to believe that every project is full-time. &lt;/p&gt;

&lt;p&gt;This innaccuracy kills me, and it goes against one of Cushion’s underlying principles—don’t rely on the user to calculate. Too many services display data and leave it up to the user to find the valuable conclusions. With Cushion, I want the user to take one look and instantly experience that ah-ha moment.&lt;/p&gt;

&lt;p&gt;So, what’s my solution to all of this? I call them “Project Blocks”. Let’s say you create a new project. By default, this project starts with one block spanning the entire project. You can then add more blocks based on your situation. If you’re an illustrator, you can create several new blocks and label them “Sketches”, “Revisions”, and “Final”. If you’re a developer with gaps in the timeline between sprints, you can create blocks to indicate when you’re actually working.&lt;/p&gt;

&lt;p&gt;This idea has been in the back of my head for a few months now, so I’m really excited to dive into it. I’ll start on initial designs today and transition into dev before the week is out. If you have any thoughts of your own, I’d love to &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;hear&lt;/a&gt; them. And, if you’re interested in trying out project blocks before anyone else, &lt;a href=&quot;/beta&quot;&gt;sign up&lt;/a&gt; for the beta.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redesigning the Homepage</title>
      <link>http://cushionapp.com/journal/2014-11-20</link>
      <pubDate>Thu, 20 Nov 2014 09:39:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-11-20</guid>
      <description>&lt;p&gt;After about 7 months of working on Cushion, I realized I hadn’t updated the homepage since coming up with the idea for the app. It still included a sentence saying “I can’t wait to build this app.” This threw people off because they would see that without seeing any other progress and just assume that it hasn’t been built yet—in their eyes, I just launched that page. &lt;/p&gt;

&lt;p&gt;This happens too often—I’m working non-stop on a project, living with it day after day, but completely unaware that maybe not everyone’s dialed in, looking over my shoulder. I assume they’ve seen every tweet and every blog post. This couldn’t be further from the truth. I still have close friends who don’t know I’m freelancing again, let alone working on Cushion.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-homepage.png&quot; alt=&quot;2014-11-20-homepage&quot;&gt; &lt;/p&gt;

&lt;p&gt;So, it was time. Instead of focusing all of my attention on the app, I needed to dedicate some time to the outward-facing side of Cushion. Since I still have much to do in the app, I gave myself a limit of one day to spend redesigning the homepage. Now that the app is in working condition, I wanted to get the point across that it’s usable—no longer just an idea or a half-baked, bug-ridden prototype. But, I didn’t want to ditch everything. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-intro.png&quot; alt=&quot;2014-11-20-intro&quot;&gt; &lt;/p&gt;

&lt;p&gt;The paragraph describing my unhealthy lifestyle as a freelancer is strong. I’d much prefer someone to read that and relate to me on a personal level than replace it with some witty marketing lingo that makes Cushion just a product that appeared overnight. I pulled out a few of my favorite features and listed them underneath. After months of working on the app and speaking with others who use it, the features were obvious. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-tracking.png&quot; alt=&quot;2014-11-20-tracking&quot;&gt; &lt;/p&gt;

&lt;p&gt;The first, project and invoice tracking, is the easy one. This needs to be a feature to even consider using the app. I wanted people to see it and immediately compare it to what they currently use—on a level of both design and functionality. The timeline should look great to them &lt;em&gt;and&lt;/em&gt; introduce something that their current app doesn’t have, like an indication that a project has dragged on past its expected due date. This is a problem that all freelancers experience, but most apps don’t make a big deal of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-client-tendencies.png&quot; alt=&quot;2014-11-20-client-tendencies&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I brought up a feature that is incredibly useful, but not exactly glamorous—client tendencies. You can learn so much about your freelance life with the simplest data. Take invoices as an example. All you need is the issue date and paid date of an invoice to reveal your client’s real net. Sure, a client says they are net 45, but in actuality, they are net 63—this is a client of mine. I never thought it would be that far off if it weren’t for Cushion calculating the exact numbers. In my head, I would just think, “Yeah, I remember them paying late, but it’s probably not too bad.” 18 days late is enough to prevent you from paying your rent that month.&lt;/p&gt;

&lt;p&gt;Delay and drag are other client tendencies. When was the last time you had a project that started when it was supposed to or finished on the exact date as planned? The majority of my projects drag on at least a week. It’s not a problem because I get paid for my extra time, but when a projects drags &lt;em&gt;into&lt;/em&gt; another project—that’s a problem. All of a sudden, I’m juggling two projects, one of which is probably at its peak because I’m wrapping up all those last-minute details. &lt;/p&gt;

&lt;p&gt;Every freelancer should know their clients’ tendencies, so they can be better prepared for unexpected scheduling conflicts and late paychecks. Maybe the data is strong enough that you wouldn’t take that project and find yourself in such a stressful situation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-goals.png&quot; alt=&quot;2014-11-20-goals&quot;&gt; &lt;/p&gt;

&lt;p&gt;The last feature I focused on is financial goals. When you’re working full-time, you have your salary and that’s that. As a freelaner, however, that number isn’t so matter-of-fact. You have what you absolutely need to make to pay your expenses, but beyond that, you can aim high or just enough to get by. When presented with a bar to fill, there’s extra incentive to fill that bar. Personally, with a month and a half to go in the year, I’m just shy of my target goal and it’s driving me insane. Without this bar, my position is either numbers on a spreadsheet or a general idea in my head. Seeing it visually gives me an instant idea of where I am, if I’m okay, and how close I am to that next goal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-timeline.png&quot; alt=&quot;2014-11-20-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;Aside from features, two other areas of the app were really important for me to bring up this time—Cushion’s development timeline and this process journal. When your product is in beta, it’s easy to leave it at that with an open-ended schedule that’s just a blur. Some betas run a few months—others last more than a year. To avoid Cushion staying behind closed doors for too long, I wanted to show a timeline for others, but also for myself. Two months into this 6-month beta, I want it to be clear that we’re roughly halfway through. This tells both myself and others that Cushion will launch and that I have a specific plan for that—not just a seemingly never-ending beta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-journal.png&quot; alt=&quot;2014-11-20-journal&quot;&gt; &lt;/p&gt;

&lt;p&gt;With the process journal, I felt it needed to be more than just a link in the site’s navigation. It makes no sense that I would dedicate so much time to writing about the progress than making progress, then just hide it and hope that people find it. Speaking to the journal on the homepage also allows me to keep that section in rotation. Instead of the feature list, which is probably solidified for a few more months, I can update to show the latest post, like this one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-20-newsletter.png&quot; alt=&quot;2014-11-20-newsletter&quot;&gt; &lt;/p&gt;

&lt;p&gt;Lastly, I kept the newsletter sign up form, with an added link to the beta page. Shouting on Twitter is easy, but it’s much more effective to speak to those who actually signed up to hear more. I’ve been collecting emails of interested people for months now and after sending my first update email this past week, I realize just how valuable that list is. I love hearing from you and hope I’m doing an okay job of communicating.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A big thanks to &lt;a href=&quot;http://nicolefenton.com&quot;&gt;Nicole Fenton&lt;/a&gt; for editing the homepage and beta copy.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Timelines</title>
      <link>http://cushionapp.com/journal/2014-11-11</link>
      <pubDate>Tue, 11 Nov 2014 09:14:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-11-11</guid>
      <description>&lt;p&gt;These past two weeks, I’ve been heads-down, working on an incredibly important feature for Cushion—support for multiple timelines. This feature was not only complex, but also time-sensitive, as beta users were already starting to plan for the next year. In building Cushion, I’ve been actively holding back on specific features that aren’t as prevalent as others. Sometimes these once-dormant features demand your attention much earlier than expected, resulting in a more stressful sprint to finish. This is why we have betas.&lt;/p&gt;

&lt;p&gt;Multiple timelines is one feature I’ve especially been pushing off because of its complexity as well as its never-ending knot of decisions. I knew it would be tough from the start, but I didn’t think it would be this bad. The high-level issues I needed to tackle consisted of establishing a way to navigate between timelines and filtering the data to the selected timeline. This sounds pretty simple until you realize a few scenarios that make it anything but simple, like projects spanning multiple timelines. The deeper I descended into the depths of the feature, the more troubling scenarios I discovered.&lt;/p&gt;

&lt;p&gt;Instead of just glossing over them with a summary, I’d like to highlight as many as I can remember, including both the scenario and my solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-span-all.png&quot; alt=&quot;2014-11-11-project-span-all&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project spans multiple timelines.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in all timelines it spans.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-around.png&quot; alt=&quot;2014-11-11-project-around&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project starts before and finishes after a specific timeline.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in that timeline.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-ongoing-estimated-finish.png&quot; alt=&quot;2014-11-11-project-ongoing-estimated-finish&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project is ongoing with an estimated finish date.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in all timelines it spans, using the maximum of the current date and its estimated finish date as the end.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-no-end-in-sight.png&quot; alt=&quot;2014-11-11-project-no-end-in-sight&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project is ongoing with no estimated finish date.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in all timelines it spans as well as all timelines beyond the current date.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-no-dates.png&quot; alt=&quot;2014-11-11-project-no-dates&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project has no estimated or actual start or finish dates.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in timeline containing the current date.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-project-with-invoice.png&quot; alt=&quot;2014-11-11-project-with-invoice&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A project finished in one timeline, but has an invoice in another timeline.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include project in both timelines.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-invoice-issued-before-today.png&quot; alt=&quot;2014-11-11-invoice-issued-before-today&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; An unpaid invoice issued before current date timeline.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include invoice only in current date timeline.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-invoice-issued-in-future.png&quot; alt=&quot;2014-11-11-invoice-issued-in-future&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; An unpaid invoice issued after current date timeline.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include invoice only in timeline containing issue date.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-invoice-paid-before-today.png&quot; alt=&quot;2014-11-11-invoice-paid-before-today&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; A paid invoice issued in a previous timeline.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include invoice only in timeline containing paid date.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-estimate-ongoing-no-estimated-finish.png&quot; alt=&quot;2014-11-11-estimate-ongoing-no-estimated-finish&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The estimate of an ongoing project with no estimated finish date.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include estimate in timeline containing current date and all future timelines.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-estimate-today-and-future.png&quot; alt=&quot;2014-11-11-estimate-today-and-future&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The estimate of a project spanning multiple timelines.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include estimate in timeline containing current date and any future timeline containing project.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-estimate-no-dates.png&quot; alt=&quot;2014-11-11-estimate-no-dates&quot;&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The estimate of a project with no dates.&lt;br&gt;
&lt;strong&gt;Solution:&lt;/strong&gt; Include estimate in timeline containing current date.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Phew. Now that we got those out of the way, the remaining problem exists in navigating these timelines. I wanted it to be dead-simple to switch between them. You should be able to quickly glance several years in the past and return to the current timeline just as easily. For months, I thought of reusing the current timeline tab for more than just indicating the current timeline. I even had dreams of the interaction—I just wondered if it would actually work out as planned.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-11-11-timeline-switch.gif&quot; alt=&quot;2014-11-11-timeline-switch&quot;&gt; &lt;/p&gt;

&lt;p&gt;Luckily, it did. When you’re not in the scheduling or budgeting view, the current timeline tab simply navigates to your default view. Then, if you hover it, a down arrow appears below it, prompting another click that expands the timeline menu. From there, you can select a different timeline and quickly navigate to it. To switch back, simply use the menu again to select the current timeline.&lt;/p&gt;

&lt;p&gt;Selecing a timeline appends a parameter to the URL, indicating the timeline ID, which then grabs both the date range for the scheduling view and the financial goals for the budgeting view. Without the parameter, Cushion uses the default timeline, which can be set in the Timelines page. Typically, this will be the timeline that contains the current date.&lt;/p&gt;

&lt;p&gt;As you could imagine, this was a whirlwind feature to finish, and after two weeks, I’m so relieved to be able to check it off the list. Now that it’s finished, I plan to send out even more invites for the paid beta. If you’re interested, &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;tweet me&lt;/a&gt; with your email address.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Support</title>
      <link>http://cushionapp.com/expenses/support</link>
      <pubDate>Sun, 02 Nov 2014 21:57:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/support</guid>
      <description></description>
    </item>
    
    <item>
      <title>Archiving and Estimate Differences</title>
      <link>http://cushionapp.com/journal/2014-10-29</link>
      <pubDate>Wed, 29 Oct 2014 11:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-29</guid>
      <description>&lt;p&gt;This past week, I added two big features. Not big in the sense of workload or scale, but big in terms of value. Both are incredibly useful and have personally made Cushion feel like a more serious contender.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archive.png&quot; alt=&quot;2014-10-29-archive&quot;&gt; &lt;/p&gt;

&lt;p&gt;The first is archiving. Previously, every client, project, and invoice you created would always remain present, regardless of whether it were still active in your day-to-day. Nearing the end of the year, that 1-day project you worked on in January would still appear aside your current projects. Now, you have the ability to archive items.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archiving.gif&quot; alt=&quot;2014-10-29-archiving&quot;&gt; &lt;/p&gt;

&lt;p&gt;Archiving does two things. In the table view, archiving allows you to toggle the visibility of any archived item using a switch in the top left. In project forms and invoice forms, archived items are filtered from the dropdown menus. With this, you no longer need to sift through &lt;em&gt;every&lt;/em&gt; project when creating a new invoice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archived-by-client.png&quot; alt=&quot;2014-10-29-archived-by-client&quot;&gt; &lt;/p&gt;

&lt;p&gt;Archiving also cascades. This means that if you archive a project, all of its invoices will be marked as archived, too. And, if you archive a client, all of its projects &lt;em&gt;and&lt;/em&gt; invoices will be marked as archived. This is not only useful for old projects, but also for potential projects that are either on hold or so far away that you don’t need to think about them yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-gain-loss.png&quot; alt=&quot;2014-10-29-gain-loss&quot;&gt; &lt;/p&gt;

&lt;p&gt;The second super useful feature is a new column in the budget view, called “gain/loss”. This column takes your projects’ estimates and compares them to your actual income for the projects, presenting it in an easy-to-read percentage. The percentage is then colored green for positive values and red for negative values. Even without reading the numbers, you’ll have an idea of how well you’re estimating.&lt;/p&gt;

&lt;p&gt;Just like income columns, the “gain/loss” column has a “sum” in the table footers. It’s not just a simple sum of each row’s percentage, but rather a comparison of your total estimates to your total income. If it’s in the red, you know you either need to better estimate your projects or bump up your rate. This column also exists in the client budget view, so you can see per-client how close or far off you were.&lt;/p&gt;

&lt;p&gt;I’m really excited about these new features as they add even more value to an app that has become indispensable to my workflow. Starting in November, I’m doubling the number of invites I send out for the paid beta this month, so if you’re interested in using Cushion early, &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple Financial Goals</title>
      <link>http://cushionapp.com/journal/2014-10-21</link>
      <pubDate>Tue, 21 Oct 2014 21:38:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-21</guid>
      <description>&lt;p&gt;&lt;img src=&quot;/assets/2014-10-21-goals.png&quot; alt=&quot;2014-10-21-goals&quot;&gt; &lt;/p&gt;

&lt;p&gt;A few weeks ago, a beta user suggested the idea of multiple financial goals for the budget timeline. At the time, there was only one goal in Cushion, which made it somewhat difficult to picture the year. Do I set the goal to what I need to make or what I want to make?—these are two very different goals. Because of this constant confusion, I replaced the single goal with three—minimum, target, and stretch.&lt;/p&gt;

&lt;p&gt;When considering your finances, it’s good to think of what you absolutely need to make to stay alive and pay the bills—your bare minimum. From there, you can aim for a higher target that allows you to do more than just survive, like go out to eat more often or take a cab instead of the subway. And, if you reach that target, you can then try for more, which might be enough to add a vacation to your year.&lt;/p&gt;

&lt;p&gt;These goals are important in the freelance life because there’s really no cap on how much you can make. Since you have no salary, you can decide how much you want to make beyond covering your expenses, granted the work is available. If you want to overload your schedule for a month in order to take a month off, you can do that. If you want to work consistently and make a killing, that’s cool, too.&lt;/p&gt;

&lt;p&gt;Personally, I don’t do a great job of aiming high. I tend to make enough to pay my minimum, then I invest the extra time in my personal projects. Recently, I’ve been investing any income over my minimum into buying more of my own time, as if I’m my own client. I’m betting on myself and my productivity. Maybe two weeks of full-time Cushion could amount to more than a two-week client gig. And maybe, with Cushion, I could reach my stretch goal all on my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zooming in on the Timeline</title>
      <link>http://cushionapp.com/journal/2014-10-16</link>
      <pubDate>Thu, 16 Oct 2014 08:36:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-16</guid>
      <description>&lt;p&gt;In the early stages of building Cushion, everything was based upon a year-long timeline view. With one look, you could see a quick and easy-to-digest glimpse of your year. When are you next available? Where do you have pockets of time to fit another project? Wow—that project really took that long? After living with this scale for a while, I wondered what I could do with a more magnified view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-data.png&quot; alt=&quot;2014-10-16-timeline-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;If we zoom in to a specific month on the timeline, we begin to give more meaning to the data. All of a sudden, a 4-day project that was just a blip on the year timeline expands to represent the true weight of those four full days. Zoomed out, it’s easy to see little difference between two lengths of time that are drastically different on the day-to-day scale, like 2 weeks versus 3 weeks, but in a month view, this is huge!&lt;/p&gt;

&lt;p&gt;I started to think of ways to actually zoom into the timeline. Of course, the line segments would scale horizontally, but does it really need to scale proportionally on the vertical end as well?—I don’t think so. In my eyes, it looks much better this way &lt;em&gt;and&lt;/em&gt; maintains the same timeline height as the year view—allowing the same amount of information to be seen underneath without a jarring effect on the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-overflow.png&quot; alt=&quot;2014-10-16-timeline-overflow&quot;&gt; &lt;/p&gt;

&lt;p&gt;When I first built the timeline view, I added a project that spanned two years and noticed a bug. With the way I coded the view, the knocked-out background of the timeline didn’t expand to account for the line segment. Instead, the line segment ran off the edge of the background, reaching the edge of the window. This wasn’t the intended behavior, but I immediately fell in love with it. The knocked-out background created a distinct boundary to the timeline, but didn’t hide any information beyond this boundary.&lt;/p&gt;

&lt;p&gt;Returning to the zoom, this undocumented feature became the perfect tie of consistency between the two scales. When you switch between month and year views, the boundary doesn’t move a pixel.&lt;/p&gt;

&lt;p&gt;The problem now was that the timeline labels for the year view, represented by months, needed to be replaced with days in order to be relevant to the new context. However, since I still wanted a dead-simple way to move from month to month, I didn’t want to get rid of the month labels. I went down a dark hole of bad designs, like a second row of labels that pushed the month labels down. It was a awful.&lt;/p&gt;

&lt;p&gt;Then, I considered the top of the timeline. At first, I discounted this idea because I just assumed it would clutter the UI. I gave it a shot, though. Sometimes, it’s important to explore directions that you would typically disregard just to say that you tried them. Surprisingly, this direction had legs. It wasn’t perfect at first, but I knew something was there if I just chiseled deep enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-10-16-timeline-month-view.png&quot;&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-month-view.png&quot; alt=&quot;2014-10-16-timeline-month-view&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of mimicking the same label design as the months, which represented spans of time, I centered the “tick” to point to the given day. And, because projects don’t factor time of day (yet), I centered the segment dots on each day block, rather than anchoring to an edge. Finally, to better separate each day, I added a slightly greyed background to the even days.&lt;/p&gt;

&lt;p&gt;Now, all of this would look great on its own, but the transition of switching between the views should look even better. Luckily, each spot I wanted to animate was as easy as adding a CSS3 transition. The line segments scale based on the number of days in the timeline to the number of days in the selected month, the month labels fade in and pan up from behind the timeline, and the even day backgrounds simply fade in.&lt;/p&gt;

&lt;div class='video-outer'&gt;
    &lt;div class='video-inner' style='padding-bottom: 34%'&gt;
        &lt;video width=&quot;100%&quot; poster=&quot;/assets/2014-10-16-timeline-zoom.png&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot; tabindex=&quot;0&quot;&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot; type=&quot;video/mp4&quot; /&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.ogv&quot; type=&quot;video/ogg&quot; /&gt;
            Video tag not supported. Download the video &lt;a href=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot;&gt;here&lt;/a&gt;.
        &lt;/video&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Scaling the line segments was the trickiest part, not because of the resizing, but because of the origin point from where to resize. Everything in the timeline is positioned and scaled based on a percentage of its day in the timeline compared to the total days in the timeline. For example, February 1st on a year timeline is located at 8.767%. I chose this route because I wanted the timeline to be able to scale down properly, if Cushion were to be responsive. Fortunately, it made my life so much easier with timeline zooming, too. Instead of scaling each line segement individually, I just need to scale the entire timeline and pan.&lt;/p&gt;

&lt;p&gt;The origin point is crucial because if you scale the timeline while panning it and not centering the origin point, the timeline &lt;em&gt;appears&lt;/em&gt; to pan before scaling. At first, I thought this was just a side effect of easing two attributes, but even when transitioned linearly, it didn’t look right. Luckily, centering the origin point was a non-issue, so everything came together in the end without needing to include JS for the animation.&lt;/p&gt;

&lt;p&gt;I couldn’t be happier with my first stab at timeline zooming. Not only because it turned out well, but also because it opens up the possibility of a few other features I want to implement. The first is simply an in-between view for zooming in on a quarter of the year. The other feature, however, is &lt;em&gt;much&lt;/em&gt; more involved. I’ll save it for another post.&lt;/p&gt;

&lt;p&gt;If you’re interested in participating in the paid beta, send me your email on &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;Twitter&lt;/a&gt; and I’ll send you an invite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Currency</title>
      <link>http://cushionapp.com/journal/2014-10-13</link>
      <pubDate>Mon, 13 Oct 2014 20:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-13</guid>
      <description>&lt;p&gt;Since I started building apps back in 2007, I’ve been keeping a list. This is a list of technical pitfalls to avoid when building a new app. Here are a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;timezones&lt;/li&gt;
&lt;li&gt;daylight saving time&lt;/li&gt;
&lt;li&gt;shoe sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list has grown over the years and I thought I was in the clear with Cushion until I discovered I needed multiple currencies. Currency! Normally, this wouldn’t be a problem, as it’s just a matter of formatting, but I quickly realized a much bigger problem—combining currencies.&lt;/p&gt;

&lt;p&gt;Looking ahead to integration with other services, I noticed that Harvest allows varying currencies per client &lt;em&gt;and&lt;/em&gt; per invoice. Freshbooks only varies per client, but allows switching a client’s default currency for current and future invoices. With this in mind, along with Cushion’s interface, I’ll need to combine currencies both visually and in table form.&lt;/p&gt;

&lt;p&gt;The table side of combining currencies is the easier of the two. Instead of trying to calculate a total based on the exchange rate of whenever you received a specific invoice, you can simply show multiple totals per currency. It won’t look as good as a single total, but it’s a much better route than driving down the road to insanity via exchange rates.&lt;/p&gt;

&lt;p&gt;On the visual side, specifically the budget timeline, I’m in a bit of a pickle. These timelines are based on a financial goal the user sets in the beginning, which is of a single currency. This means that if I want to visualize a variety of currencies, I’ll need a goal per currency, which is not going to happen.&lt;/p&gt;

&lt;p&gt;I have a few ideas of how to get around this, but I’m getting ahead of myself. As a first step, I just need the ability to change the default currency per user. This is an easy one, so I’m happy to say it’s already done. I found a Ruby gem, called &lt;a href=&quot;https://github.com/RubyMoney/money&quot;&gt;Money&lt;/a&gt;, that provides a thorough list of currencies, along with their symbols, symbol positions, thousand separator, and decimal separator. On the front-end, I can still use &lt;a href=&quot;https://github.com/openexchangerates/accounting.js&quot;&gt;Accounting.js&lt;/a&gt;—all I need to do is provide the currency settings from the backend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://cushionapp.com/expenses/metrics</link>
      <pubDate>Wed, 01 Oct 2014 10:48:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/metrics</guid>
      <description></description>
    </item>
    
    <item>
      <title>Preferences, Accounts, and a Typeface Change</title>
      <link>http://cushionapp.com/journal/2014-09-26</link>
      <pubDate>Fri, 26 Sep 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-26</guid>
      <description>&lt;p&gt;These past couple weeks, I’ve been focusing on making Cushion feel like a legit app. To me, this entails adding all the little parts that can be easily skipped early on, like the ability to change your password. For a public app, these are essential, but in my eyes, you can go without them for a week or so when holding a private beta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-preferences.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-preferences.png&quot; alt=&quot;2014-09-26-preferences&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alongside smoothing out the experience, I started building in convenience features, like preferences. Since getting Cushion in the hands of others, there has been an obvious need for certain defaults, so when a user fills out a form, they don’t find them setting the same value on the same field every single time. &lt;/p&gt;

&lt;p&gt;The most apparent of these fields was the invoice’s relative due date, or net. Most freelancers use the same net for every project and they all vary in generosity, from “net 30” to “due upon receipt”. Now, I have a preference for this field, so whenever the user creates a new invoice, the net is that value by default.&lt;/p&gt;

&lt;p&gt;With new additions, it’s good to hold back from implementing them until you have at least two examples to use. For example, I wouldn’t add a preferences section if I only had this one preference. That’s why I added two more—default tab and default view.&lt;/p&gt;

&lt;p&gt;For me, the projects section with the schedule view is the page I use the most, but this isn’t the case for everyone. If you’re less about scheduling and more about accounting, you might live in the invoices tab with the budget view. With these new default tab and view preferences, any time you switch from the account/preferences section of Cushion back to the timeline section, it will take you to your default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-account.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-account.png&quot; alt=&quot;2014-09-26-account&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of accounts and preference, I don’t think I ever mentioned this second side of Cushion. From the beginning, users have only had access to the timeline section, which consists of the client, project, and invoice tabs. Now that I’m adding all the necessary parts of a real app, I established a top level navigation for switching between the timeline section and the account/settings/whatever-you-want-to-call-it section. This navigation system works pretty well so far, allowing a new set of view level tabs for switching between account information and preferences. For now, these are the only two tabs, but eventually, we will have a few more for hooks and integrations—the fun stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-update-notification.png&quot; alt=&quot;2014-09-26-update-notification&quot;&gt; &lt;/p&gt;

&lt;p&gt;Tacking onto the legitamcy of Cushion, I built a dead-simple update notification alert for users to know when I deployed a new version. It slides in from the top, just like success notifications, but it’s blue and refreshes the page upon clicking it. The downside of a web app is that a user only sees what they loaded last. This means, if they haven’t refreshed the browser in weeks, which has happened with past apps I’ve worked on, they will be using an older, potentially incompatible version.&lt;/p&gt;

&lt;p&gt;I didn’t want to be wasteful and poll for changes. Instead, I decided to use a custom response header &lt;code&gt;X-App-Version&lt;/code&gt; with each API response. This value is an environment variable that I set after deploying a new version. Because the app checks the difference upon receiving a new response, like switching views, we won’t experience any of the issues we’d see from something like refreshing upon a date change—the alerts are spread out more.&lt;/p&gt;

&lt;p&gt;I’ve been on a few betas that also use an update notification, but I noticed that they often forget to include what’s new. I get excited for updates, but then I need to spend a few minutes digging through the app, looking for changes. For Cushion, I created a new &lt;a href=&quot;/changelog&quot;&gt;changelog&lt;/a&gt; page, which the alert links to. The changelog runs on the same static system that this journal runs on, so if I spot a typo, I don’t have to prompt the user of an update by deploying the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-font-table.png&quot; alt=&quot;2014-09-26-font-table&quot;&gt; &lt;/p&gt;

&lt;p&gt;The last bit of progress I’ll cover in this post is the obvious font change. I’ve been keeping this in the back of my mind since the beginning, knowing I would need to eventually pick one other than Helvetica Neue. After literally hours of switching between several fonts and just staring at the screen, I decided to go with &lt;a href=&quot;http://justanotherfoundry.com/facit&quot;&gt;Facit&lt;/a&gt; by &lt;a href=&quot;http://justanotherfoundry.com/&quot;&gt;Just Another Foundry&lt;/a&gt;. The decision was tough, but in the end, I picked Facit for its personality, solidity, and beautiful italics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-tooltip.png&quot; alt=&quot;2014-09-26-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;The typeface has a very wide range of weights, which work incredibly well in Cushion’s interface. I’ve been able to find areas in Cushion that benefit greatly from a variance in thickness, like the timeline tooltips. Overall, I think like Facit gets me closer to that solid, reliable feel that I want users to experience when using the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending Out the First Email</title>
      <link>http://cushionapp.com/journal/2014-09-12</link>
      <pubDate>Fri, 12 Sep 2014 08:49:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-12</guid>
      <description>&lt;p&gt;These past couple weeks have been intense. Last weekend, I sent out the first batch of beta invites. I say “batch” for consistency moving forward, but it was only 10. I want to be deliberate with how I bring users into the app, considering Cushion is currently only me, so I’m intentionally starting small. For the first month, I’ll send out 10 invites a week. Then, based on how everything’s going, I’ll increase it to 20 or 30 a week.&lt;/p&gt;

&lt;p&gt;The plan is to onboard people gradually, instead of opening the floodgates. Ever since adding the email subscribe form, I’ve been able to attract 1,042 people interested in Cushion—either for their own personal use or out of pure interest in following along. In the weeks leading up to the beta, I sent out the first email:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Howdy,&lt;/p&gt;

&lt;p&gt;A few months ago, you signed up to hear more about Cushion (&lt;a href=&quot;http://cushionapp.com&quot;&gt;http://cushionapp.com&lt;/a&gt;), the app I&amp;rsquo;m working on to bring peace of mind to freelancers. It&amp;rsquo;s almost ready for beta testing, so I wanted to reach out and ask a favor. &lt;/p&gt;

&lt;p&gt;I created a &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;short questionnaire&lt;/a&gt; to learn more about the folks who would want to use it and get a show of hands for those interested in beta testing. It&amp;rsquo;ll be super helpful for me and only take you a minute to fill out—I promise.&lt;/p&gt;

&lt;p&gt;-Jonnie&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want all of the communication with users and potential users to feel like I’m talking directly to them in person, which is why I try to write like I talk. Years of receiving insincere emails from product companies has left me with one of the fastest trigger fingers for deleting emails. I’ve also tried to learn from their mistakes and avoid what turned me off.&lt;/p&gt;

&lt;p&gt;The first pet peeve is when companies collect an optional name along with the email address and fall back to an empty string. This results in “Hey there ,”. In most cases, it’s a dead giveaway that this is a mass email trying to feel personal with either the space before the comma or the person entering a lowercase name. There’s nothing wrong with a simple “Hi”, or even “Howdy”.&lt;/p&gt;

&lt;p&gt;Secondly, product teams are often so engrossed in their app that when they finally send the initial email, they forget that the majority of people haven’t lived with the app for the past six months. Most of them probably saw it mentioned somewhere, signed up to hear more, then forgot about it—especially if it has a nonsensical name beginning with a “Z”. Make use of the first sentence to remind everyone what they signed up for.&lt;/p&gt;

&lt;p&gt;Lastly, I know a survey is a big ask for anyone, so instead of just assuming they’ll fill it out like a form at the DMV, I emphasized its brevity along with its importance to me. Hopefully that would be enough to get a good turnout. So, how’d it do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The email went out to &lt;strong&gt;1,007&lt;/strong&gt; people.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;999&lt;/strong&gt; of the emails were delivered &lt;em&gt;(99.21%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;730&lt;/strong&gt; people clicked the link to the survey &lt;em&gt;(72.49%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;498&lt;/strong&gt; people completed the survey &lt;em&gt;(49.45%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8&lt;/strong&gt; of the emails bounced &lt;em&gt;(0.79%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;12&lt;/strong&gt; people unsubscribed &lt;em&gt;(1.2%)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I never send out mass emails, so I don’t know if this is good, but considering I delete most of the ones I get, I’m pretty happy with the results.&lt;/p&gt;

&lt;p&gt;As for the &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;survey&lt;/a&gt;, it consisted of 10 questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you a solo freelancer?&lt;/li&gt;
&lt;li&gt;If not, how many people are on your team?&lt;/li&gt;
&lt;li&gt;What kind of work do you do?&lt;/li&gt;
&lt;li&gt;What do you use for project management, time-tracking, and invoicing?&lt;/li&gt;
&lt;li&gt;How many projects do you work on each year?&lt;/li&gt;
&lt;li&gt;How many invoices do you send each year?&lt;/li&gt;
&lt;li&gt;How do you bill?&lt;/li&gt;
&lt;li&gt;Are you interested in the paid beta?&lt;/li&gt;
&lt;li&gt;Are you okay with manually entering your data?&lt;/li&gt;
&lt;li&gt;Seinfeld or Friends?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results were overwhelming in the best way possible. Since there were a handful of options for each question, you can view the full results &lt;a href=&quot;https://cushionapp.typeform.com/report/mgayv7/aXGT&quot;&gt;here&lt;/a&gt;, but the gist is that the majority of potential users fit my exact description—solo freelancer, working on 6-15 projects a year, sending out 21-50 invoices a year. By designing Cushion to best fit my needs, I’ve been unknowingly targeting the demographic most-likely to use Cushion. This is huge for the initial plans of focusing on freelancers, but with a fair amount of small teams also showing interest, there’s an obvious direction of where to go next.&lt;/p&gt;

&lt;p&gt;This weekend, I plan to send out 10 more beta invites. If you want one sooner than later, &lt;a href=&quot;mailto:jonnie@cushionapp.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email marketing</title>
      <link>http://cushionapp.com/expenses/email-marketing</link>
      <pubDate>Sat, 30 Aug 2014 15:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/email-marketing</guid>
      <description></description>
    </item>
    
    <item>
      <title>Currency Inputs, Notifications, and Invoice Nets</title>
      <link>http://cushionapp.com/journal/2014-08-27</link>
      <pubDate>Wed, 27 Aug 2014 10:41:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-27</guid>
      <description>&lt;p&gt;I’m so close. I spent this last week putting the finishing touches on Cushion. The majority of them surrounded small UX issues that would’ve definitely arisen out of the beta. I figured I’d rather tackle them now and have a more solid product going into the initial testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-income-input.gif&quot; alt=&quot;2014-08-27-income-input&quot;&gt; &lt;/p&gt;

&lt;p&gt;The most overlooked UX issue involved the income input fields. Up until now, it was a simple number-based input. It would balk at any character other than a number (even commas and dollar signs) and there was no currency formatting. With a history of using awful currency-based input fields and pulling my hair out when it’s not perfect for the server, I decided to go out of my way to make this easy. Upon exiting the input field, it’ll run a validation function that strips out any character that doesn’t belong and then reformats it, inserting a dollar sign and any commas if we’re in the thousands. Also, if the amount includes cents, it will format that as well or leave it out if it’s an even dollar amount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-success.gif&quot; alt=&quot;2014-08-27-success&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I realized I didn’t show any sort of success message to indicate that a project or invoice was created, updated, or deleted. I started to design a full-width banner that would appear in the form, but decided to take a step back. You should be able to see this message at all times. If you’re scrolled out of the view of the banner area, that doesn’t mean you should miss it. Also, upon creating a new project, you’re taken to the edit view, so this message should carry across views. Because of this, I opted to pin the message at the top. It slides in when needed, remains visible in all scroll positions, and slides out after a couple seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-due-net.gif&quot; alt=&quot;2014-08-27-due-net&quot;&gt; &lt;/p&gt;

&lt;p&gt;Lastly, I tackled the longest overdue feature—a net option for invoices. I attempted to start on this feature a dozen times, but always gave up after a while to direct my attention elsewhere. The tricky part was positioning the form elements, so it felt like a natural flow from the issue date to due date to paid date. If I placed the custom due date input below the dropdown, it would look completely off, but if that custom input was hidden until selected, it wouldn’t look half-bad. I took a tally for common invoice nets to use, including “upon receipt”, and added the final option for a specific date. Eventually, this will default to your net preference, so you will only need to change it if the client has their own net.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dots and Lines</title>
      <link>http://cushionapp.com/journal/2014-08-19</link>
      <pubDate>Tue, 19 Aug 2014 09:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-19</guid>
      <description>&lt;p&gt;Progress on Cushion has been amazing this past week. I feel like I’m past the point of shaping with play-doh and now using a fine-tooth chisel. I spent the majority of the time cleaning up the app, adding all of the parts that you forego when quickly prototyping, like error messaging and loading indicators. Even though these additions aren’t glamorous, they smooth out the experience. This is no longer a prototype—it’s a real app.&lt;/p&gt;

&lt;p&gt;The second half of the week was more exciting. After speaking with a fellow studiomate about what’s important for the scheduling timeline, I realized the top priority should be clarity. And, up until this point, the scheduling timeline has been anything but clear. My mistake was trying to represent timeframes with bars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-old-timeline.png&quot; alt=&quot;2014-08-19-old-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;First off, this makes no sense. With a bar, you &lt;em&gt;do&lt;/em&gt; have a start and an end, but they tell you nothing besides the start and end. What if I want to know if the project is ongoing? On top of that, there’s next to no information in between. Down the line, I’m certain we’ll need room for milestones and, potentially, other symbols.&lt;/p&gt;

&lt;p&gt;All of a sudden, these bars started feeling like they represented a value other than time, especially when it came to invoices. An invoice that dragged on for months felt like a big-paying invoice. A project that spanned half the year but only required one day a week looked just like a full-time project. This lack of clarity became a real problem, to the point where I didn’t trust the visual. I had to spend a minute translating it before I could react and notice any valuable information.&lt;/p&gt;

&lt;p&gt;Right when I was ready to leave for the day, I decided to quickly try out an idea. I scrapped the bars and started fresh. I tried to imagine a scheduling timeline without any history of what I have designed so far. Since it pertains dates and timespans, it should use dots and lines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-actual.png&quot; alt=&quot;2014-08-19-estimated-actual&quot;&gt; &lt;/p&gt;

&lt;p&gt;The dots will represent the dates. For projects, this currently includes the estimated start/finish dates and actual start/finish dates. For invoices, the issue date, due date, and paid date. Estimated dates shouldn’t carry the same weight as the actual dates because they’re not confirmed, so any estimated dates will have a different style—an outlined circle. Then, any actual date will be a solid fill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-hide-estimated.png&quot; alt=&quot;2014-08-19-hide-estimated&quot;&gt; &lt;/p&gt;

&lt;p&gt;This felt like a lot of dots. Then I realized we could imply the existence of the estimated dates through the style of the line. If a project starts late, the line from the estimated start date to the actual start date should be a lighter version of the working line. That alone tells what we want to know, but then we can show the specific dates upon hovering the project. This way, we can establish an overall timeline UX of “hover to show more information”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-future-project.png&quot; alt=&quot;2014-08-19-future-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;Hiding the estimated dates outside of hover also helps us when it comes to future projects. With no actual dates, these future projects are represented by only a light line—clearly showing that a project spans that timeframe, but it hasn’t been anchored with the weight of actual dates. Now there’s an obvious difference between a past project and a future project. But, what about current projects?&lt;/p&gt;

&lt;p&gt;With the previous bar design, we had no clear way of knowing which projects you were actively working on or which invoices were in the pipeline. I wanted to be able to look at the timeline and immediately know how many projects were active and which ones. With this new design, I introduced a new element—an arrow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-project.png&quot; alt=&quot;2014-08-19-active-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For any project or invoice that spans the current date, an arrow will appear on that line. If a project has started, the line up until that arrow will be solid to show that you’ve actively worked on it up until now. The line after the arrow will remain lighter to indicate that you haven’t worked through that time yet, but it can potentially span that far.&lt;/p&gt;

&lt;p&gt;An arrow was the first thing that came to mind as a way of showing activity and it worked right off the bat. I can clearly distinguish these projects from the others and I don’t need a label because it pointing in the direction of time is all we need to get the point across.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-project.png&quot; alt=&quot;2014-08-19-dragged-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For projects that drag on, I reclaimed the hash pattern from the previous design. I still think it works with this new look as long as it’s the only place where we use a hash pattern. Also, like before, the pattern animates if an invoice is currently late. The movement is subtle enough to instill a sense of urgency, but won’t send you into panic mode.&lt;/p&gt;

&lt;p&gt;In the previous post, I touched on a new tooltip design for the scheduling timeline, showing more useful information than just a client/project label. With this new design, I decided to take it a step further and show even more. Since we’re now working with several new elements—dots, lines, and arrows—we could utilize all three of these to tell us more about projects and invoices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-finish-tooltip.png&quot; alt=&quot;2014-08-19-estimated-finish-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For dots, show the date that it represents and reiterate whether it’s estimated or not. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-tooltip.png&quot; alt=&quot;2014-08-19-dragged-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For lines, indicate the duration of the line and what it represents—early, late, drag, active, etc. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-date-tooltip.png&quot; alt=&quot;2014-08-19-active-date-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;And for arrows, simply show that a project or invoice is active as of the current date. These new details help in revealing the additional information you would want to know, but it also keeps us from needing an additional key to reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-new-timeline.png&quot; alt=&quot;2014-08-19-new-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;After using the new scheduling timeline design for the past few days, I feel so much more confident and on top of things. I honestly can’t believe I even considered the previous design in the first place, but at least I know I’m making progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculating in the Database and Revealing Tendencies</title>
      <link>http://cushionapp.com/journal/2014-08-11</link>
      <pubDate>Mon, 11 Aug 2014 09:43:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-11</guid>
      <description>&lt;p&gt;This last week, I focused primarily on the Cushion backend. In working locally on the app, I realized that it was becoming sluggish—especially on pages with a lot of content. I’ve been building this app with progress in mind, so I haven’t been as considerate as I should be. I query the database far too often and calculate the results in Ruby when it could all be done in the database. Because of this, performance issues are apparent.&lt;/p&gt;

&lt;p&gt;For example, a single request to retrieve a list of projects uses a single query for the projects, but then three additional queries for each project to grab the sum of its invoices. With my current personal data, this resulted in nearly 150 queries just to pull down my projects! Not good.&lt;/p&gt;

&lt;p&gt;I knew this would happen when I wrote the code because, at the time, I just needed it to work. I’m being a responsible dev and using test-driven development for the backend, so in order for the tests to pass, they just need the correct result. Now that I’m further along, however, I also need the code to perform well. Luckily, I can go back and fine-tune the code, knowing that my tests are in place to double-check that it still works.&lt;/p&gt;

&lt;p&gt;After getting up to speed with PostgreSQL, I realized just how much I could do in the database rather than in Ruby—apparently, much more than I imagined. I started by focusing on those invoices sums—paid income, unpaid income, and relative estimated income. The first two are straightforward—just paid invoices and unpaid invoices—but the last one is trickier.&lt;/p&gt;

&lt;p&gt;Every project has an estimated income, which is a ballpark amount that this project could potentially bring in. It’s not a guarantee that you’ll reach that amount, nor is it a guarantee that it will &lt;em&gt;only&lt;/em&gt; bring in that amount. It’s just a figure to give you an idea. With this figure, however, we can do some interesting things, like seeing how close or far off you were.&lt;/p&gt;

&lt;p&gt;If we take the estimated income for a project and subtract the sum of its invoices, we can see the actual income relative to the estimated amount. As you’re working on the project, this can be useful for seeing how much is potentially remaining, if it’s capped-off at that amount. Or, if you’re working hourly without a cap, you  can see how much more you’ve made than originally anticipated. Hopefully, you fall in the latter end of this example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-client-budget.png&quot; alt=&quot;2014-08-11-client-budget&quot;&gt; &lt;/p&gt;

&lt;p&gt;I wrapped up projects and moved up the chain to clients. For clients, I have these sums of income as well, but on a wider scale, combining the sums of each client’s projects. This is useful in seeing which clients bring in the most (in case you need to spread out your income streams) and which clients owe you the most (revealing a red flag going forward).&lt;/p&gt;

&lt;p&gt;We also have a lot of data to play with in regards to scheduling. Since every project has both estimated and actual start dates and end dates, I’ve been able reveal projects that start late or drag on too long. This is useful enough on the project level, but if we take a step back and group the projects by client, we can learn a lot about client tendencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-client-schedule.png&quot; alt=&quot;2014-08-11-client-schedule&quot;&gt; &lt;/p&gt;

&lt;p&gt;Now, instead of sums, we can calculate averages. The three main columns represent the average duration, delay and drag of clients. With them, we can expose a lot. If a client consistently feeds you only small scope projects, you can know with confidence whether you can fit them in an open slot in your schedule. On the cautionary side, we can use average delay and drag to question whether you should still work with this client or just account for the delay and drag when planning the next gig with them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-tooltips.png&quot; alt=&quot;2014-08-11-tooltips&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also improved the schedule tooltip to provide written details of what you’re looking at rather than forcing you to do the math—you can now point to a specific segment of a bar and see what it represents. For clients and projects, these segments include the delay, drag, duration and estimated duration.&lt;/p&gt;

&lt;p&gt;Under invoices, using the dates assigned to each (issued, due, and paid), the segments represent how early an invoice was paid, how late an invoice was paid (more realistic), how long an invoice took to get paid, and how long until an invoice is due.&lt;/p&gt;

&lt;p&gt;With these new tooltips in place, I feel like I’m going in a really good direction—taking useful data and making it easily accessible. Being able to see the data in table form is easy, but I’d rather provide the ability to interact with data in context.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
