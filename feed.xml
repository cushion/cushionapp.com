<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Cushion</title>
    <link>http://cushionapp.com</link>
    <pubDate>Tue, 21 Oct 2014 02:52:22 +0000</pubDate>
    
    <item>
      <title>2014-10-20</title>
      <link>http://cushionapp.com/changelog/2014-10-20</link>
      <pubDate>Mon, 20 Oct 2014 21:34:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-20</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-16</title>
      <link>http://cushionapp.com/changelog/2014-10-16</link>
      <pubDate>Fri, 17 Oct 2014 00:10:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-16</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-16</title>
      <link>http://cushionapp.com/journal/2014-10-16</link>
      <pubDate>Thu, 16 Oct 2014 08:36:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-16</guid>
      <description>&lt;p&gt;In the early stages of building Cushion, everything was based upon a year-long timeline view. With one look, you could see a quick and easy-to-digest glimpse of your year. When are you next available? Where do you have pockets of time to fit another project? Wow—that project really took that long? After living with this scale for a while, I wondered what I could do with a more magnified view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-data.png&quot; alt=&quot;2014-10-16-timeline-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;If we zoom in to a specific month on the timeline, we begin to give more meaning to the data. All of a sudden, a 4-day project that was just a blip on the year timeline expands to represent the true weight of those four full days. Zoomed out, it’s easy to see little difference between two lengths of time that are drastically different on the day-to-day scale, like 2 weeks versus 3 weeks, but in a month view, this is huge!&lt;/p&gt;

&lt;p&gt;I started to think of ways to actually zoom into the timeline. Of course, the line segments would scale horizontally, but does it really need to scale proportionally on the vertical end as well?—I don’t think so. In my eyes, it looks much better this way &lt;em&gt;and&lt;/em&gt; maintains the same timeline height as the year view—allowing the same amount of information to be seen underneath without a jarring effect on the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-overflow.png&quot; alt=&quot;2014-10-16-timeline-overflow&quot;&gt; &lt;/p&gt;

&lt;p&gt;When I first built the timeline view, I added a project that spanned two years and noticed a bug. With the way I coded the view, the knocked-out background of the timeline didn’t expand to account for the line segment. Instead, the line segment ran off the edge of the background, reaching the edge of the window. This wasn’t the intended behavior, but I immediately fell in love with it. The knocked-out background created a distinct boundary to the timeline, but didn’t hide any information beyond this boundary.&lt;/p&gt;

&lt;p&gt;Returning to the zoom, this undocumented feature became the perfect tie of consistency between the two scales. When you switch between month and year views, the boundary doesn’t move a pixel.&lt;/p&gt;

&lt;p&gt;The problem now was that the timeline labels for the year view, represented by months, needed to be replaced with days in order to be relevant to the new context. However, since I still wanted a dead-simple way to move from month to month, I didn’t want to get rid of the month labels. I went down a dark hole of bad designs, like a second row of labels that pushed the month labels down. It was a awful.&lt;/p&gt;

&lt;p&gt;Then, I considered the top of the timeline. At first, I discounted this idea because I just assumed it would clutter the UI. I gave it a shot, though. Sometimes, it’s important to explore directions that you would typically disregard just to say that you tried them. Surprisingly, this direction had legs. It wasn’t perfect at first, but I knew something was there if I just chiseled deep enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-10-16-timeline-month-view.png&quot;&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-month-view.png&quot; alt=&quot;2014-10-16-timeline-month-view&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of mimicking the same label design as the months, which represented spans of time, I centered the “tick” to point to the given day. And, because projects don’t factor time of day (yet), I centered the segment dots on each day block, rather than anchoring to an edge. Finally, to better separate each day, I added a slightly greyed background to the even days.&lt;/p&gt;

&lt;p&gt;Now, all of this would look great on its own, but the transition of switching between the views should look even better. Luckily, each spot I wanted to animate was as easy as adding a CSS3 transition. The line segments scale based on the number of days in the timeline to the number of days in the selected month, the month labels fade in and pan up from behind the timeline, and the even day backgrounds simply fade in.&lt;/p&gt;

&lt;div class='video-outer'&gt;
    &lt;div class='video-inner' style='padding-bottom: 34%'&gt;
        &lt;video width=&quot;100%&quot; poster=&quot;/assets/2014-10-16-timeline-zoom.png&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot; tabindex=&quot;0&quot;&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot; type=&quot;video/mp4&quot; /&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.ogv&quot; type=&quot;video/ogg&quot; /&gt;
            Video tag not supported. Download the video &lt;a href=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot;&gt;here&lt;/a&gt;.
        &lt;/video&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Scaling the line segments was the trickiest part, not because of the resizing, but because of the origin point from where to resize. Everything in the timeline is positioned and scaled based on a percentage of its day in the timeline compared to the total days in the timeline. For example, February 1st on a year timeline is located at 8.767%. I chose this route because I wanted the timeline to be able to scale down properly, if Cushion were to be responsive. Fortunately, it made my life so much easier with timeline zooming, too. Instead of scaling each line segement individually, I just need to scale the entire timeline and pan.&lt;/p&gt;

&lt;p&gt;The origin point is crucial because if you scale the timeline while panning it and not centering the origin point, the timeline &lt;em&gt;appears&lt;/em&gt; to pan before scaling. At first, I thought this was just a side effect of easing two attributes, but even when transitioned linearly, it didn’t look right. Luckily, centering the origin point was a non-issue, so everything came together in the end without needing to include JS for the animation.&lt;/p&gt;

&lt;p&gt;I couldn’t be happier with my first stab at timeline zooming. Not only because it turned out well, but also because it opens up the possibility of a few other features I want to implement. The first is simply an in-between view for zooming in on a quarter of the year. The other feature, however, is &lt;em&gt;much&lt;/em&gt; more involved. I’ll save it for another post.&lt;/p&gt;

&lt;p&gt;If you’re interested in participating in the paid beta, send me your email on &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;Twitter&lt;/a&gt; and I’ll send you an invite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-15</title>
      <link>http://cushionapp.com/changelog/2014-10-15</link>
      <pubDate>Wed, 15 Oct 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-15</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-13</title>
      <link>http://cushionapp.com/journal/2014-10-13</link>
      <pubDate>Mon, 13 Oct 2014 20:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-13</guid>
      <description>&lt;p&gt;Since I started building apps back in 2007, I’ve been keeping a list. This is a list of technical pitfalls to avoid when building a new app. Here are a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;timezones&lt;/li&gt;
&lt;li&gt;daylight saving time&lt;/li&gt;
&lt;li&gt;shoe sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list has grown over the years and I thought I was in the clear with Cushion until I discovered I needed multiple currencies. Currency! Normally, this wouldn’t be a problem, as it’s just a matter of formatting, but I quickly realized a much bigger problem—combining currencies.&lt;/p&gt;

&lt;p&gt;Looking ahead to integration with other services, I noticed that Harvest allows varying currencies per client &lt;em&gt;and&lt;/em&gt; per invoice. Freshbooks only varies per client, but allows switching a client’s default currency for current and future invoices. With this in mind, along with Cushion’s interface, I’ll need to combine currencies both visually and in table form.&lt;/p&gt;

&lt;p&gt;The table side of combining currencies is the easier of the two. Instead of trying to calculate a total based on the exchange rate of whenever you received a specific invoice, you can simply show multiple totals per currency. It won’t look as good as a single total, but it’s a much better route than driving down the road to insanity via exchange rates.&lt;/p&gt;

&lt;p&gt;On the visual side, specifically the budget timeline, I’m in a bit of a pickle. These timelines are based on a financial goal the user sets in the beginning, which is of a single currency. This means that if I want to visualize a variety of currencies, I’ll need a goal per currency, which is not going to happen.&lt;/p&gt;

&lt;p&gt;I have a few ideas of how to get around this, but I’m getting ahead of myself. As a first step, I just need the ability to change the default currency per user. This is an easy one, so I’m happy to say it’s already done. I found a Ruby gem, called &lt;a href=&quot;https://github.com/RubyMoney/money&quot;&gt;Money&lt;/a&gt;, that provides a thorough list of currencies, along with their symbols, symbol positions, thousand separator, and decimal separator. On the front-end, I can still use &lt;a href=&quot;https://github.com/openexchangerates/accounting.js&quot;&gt;Accounting.js&lt;/a&gt;—all I need to do is provide the currency settings from the backend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-13</title>
      <link>http://cushionapp.com/changelog/2014-10-13</link>
      <pubDate>Mon, 13 Oct 2014 15:17:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-13</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-12</title>
      <link>http://cushionapp.com/changelog/2014-10-12</link>
      <pubDate>Sun, 12 Oct 2014 20:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-12</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-04</title>
      <link>http://cushionapp.com/changelog/2014-10-04</link>
      <pubDate>Thu, 02 Oct 2014 17:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-04</guid>
      <description></description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://cushionapp.com/expenses/metrics</link>
      <pubDate>Wed, 01 Oct 2014 10:48:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/metrics</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-01</title>
      <link>http://cushionapp.com/changelog/2014-10-01</link>
      <pubDate>Wed, 01 Oct 2014 00:32:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-01</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-29</title>
      <link>http://cushionapp.com/changelog/2014-09-29</link>
      <pubDate>Tue, 30 Sep 2014 10:11:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-29</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-26</title>
      <link>http://cushionapp.com/journal/2014-09-26</link>
      <pubDate>Fri, 26 Sep 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-26</guid>
      <description>&lt;p&gt;These past couple weeks, I’ve been focusing on making Cushion feel like a legit app. To me, this entails adding all the little parts that can be easily skipped early on, like the ability to change your password. For a public app, these are essential, but in my eyes, you can go without them for a week or so when holding a private beta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-preferences.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-preferences.png&quot; alt=&quot;2014-09-26-preferences&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alongside smoothing out the experience, I started building in convenience features, like preferences. Since getting Cushion in the hands of others, there has been an obvious need for certain defaults, so when a user fills out a form, they don’t find them setting the same value on the same field every single time. &lt;/p&gt;

&lt;p&gt;The most apparent of these fields was the invoice’s relative due date, or net. Most freelancers use the same net for every project and they all vary in generosity, from “net 30” to “due upon receipt”. Now, I have a preference for this field, so whenever the user creates a new invoice, the net is that value by default.&lt;/p&gt;

&lt;p&gt;With new additions, it’s good to hold back from implementing them until you have at least two examples to use. For example, I wouldn’t add a preferences section if I only had this one preference. That’s why I added two more—default tab and default view.&lt;/p&gt;

&lt;p&gt;For me, the projects section with the schedule view is the page I use the most, but this isn’t the case for everyone. If you’re less about scheduling and more about accounting, you might live in the invoices tab with the budget view. With these new default tab and view preferences, any time you switch from the account/preferences section of Cushion back to the timeline section, it will take you to your default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-account.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-account.png&quot; alt=&quot;2014-09-26-account&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of accounts and preference, I don’t think I ever mentioned this second side of Cushion. From the beginning, users have only had access to the timeline section, which consists of the client, project, and invoice tabs. Now that I’m adding all the necessary parts of a real app, I established a top level navigation for switching between the timeline section and the account/settings/whatever-you-want-to-call-it section. This navigation system works pretty well so far, allowing a new set of view level tabs for switching between account information and preferences. For now, these are the only two tabs, but eventually, we will have a few more for hooks and integrations—the fun stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-update-notification.png&quot; alt=&quot;2014-09-26-update-notification&quot;&gt; &lt;/p&gt;

&lt;p&gt;Tacking onto the legitamcy of Cushion, I built a dead-simple update notification alert for users to know when I deployed a new version. It slides in from the top, just like success notifications, but it’s blue and refreshes the page upon clicking it. The downside of a web app is that a user only sees what they loaded last. This means, if they haven’t refreshed the browser in weeks, which has happened with past apps I’ve worked on, they will be using an older, potentially incompatible version.&lt;/p&gt;

&lt;p&gt;I didn’t want to be wasteful and poll for changes. Instead, I decided to use a custom response header &lt;code&gt;X-App-Version&lt;/code&gt; with each API response. This value is an environment variable that I set after deploying a new version. Because the app checks the difference upon receiving a new response, like switching views, we won’t experience any of the issues we’d see from something like refreshing upon a date change—the alerts are spread out more.&lt;/p&gt;

&lt;p&gt;I’ve been on a few betas that also use an update notification, but I noticed that they often forget to include what’s new. I get excited for updates, but then I need to spend a few minutes digging through the app, looking for changes. For Cushion, I created a new &lt;a href=&quot;/changelog&quot;&gt;changelog&lt;/a&gt; page, which the alert links to. The changelog runs on the same static system that this journal runs on, so if I spot a typo, I don’t have to prompt the user of an update by deploying the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-font-table.png&quot; alt=&quot;2014-09-26-font-table&quot;&gt; &lt;/p&gt;

&lt;p&gt;The last bit of progress I’ll cover in this post is the obvious font change. I’ve been keeping this in the back of my mind since the beginning, knowing I would need to eventually pick one other than Helvetica Neue. After literally hours of switching between several fonts and just staring at the screen, I decided to go with &lt;a href=&quot;http://justanotherfoundry.com/facit&quot;&gt;Facit&lt;/a&gt; by &lt;a href=&quot;http://justanotherfoundry.com/&quot;&gt;Just Another Foundry&lt;/a&gt;. The decision was tough, but in the end, I picked Facit for its personality, solidity, and beautiful italics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-tooltip.png&quot; alt=&quot;2014-09-26-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;The typeface has a very wide range of weights, which work incredibly well in Cushion’s interface. I’ve been able to find areas in Cushion that benefit greatly from a variance in thickness, like the timeline tooltips. Overall, I think like Facit gets me closer to that solid, reliable feel that I want users to experience when using the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-09-25</title>
      <link>http://cushionapp.com/changelog/2014-09-25</link>
      <pubDate>Thu, 25 Sep 2014 23:25:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-25</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-22</title>
      <link>http://cushionapp.com/changelog/2014-09-22</link>
      <pubDate>Mon, 22 Sep 2014 15:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-22</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-20</title>
      <link>http://cushionapp.com/changelog/2014-09-20</link>
      <pubDate>Sat, 20 Sep 2014 19:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-20</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-17</title>
      <link>http://cushionapp.com/changelog/2014-09-17</link>
      <pubDate>Wed, 17 Sep 2014 21:47:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-17</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-12</title>
      <link>http://cushionapp.com/journal/2014-09-12</link>
      <pubDate>Fri, 12 Sep 2014 08:49:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-12</guid>
      <description>&lt;p&gt;These past couple weeks have been intense. Last weekend, I sent out the first batch of beta invites. I say “batch” for consistency moving forward, but it was only 10. I want to be deliberate with how I bring users into the app, considering Cushion is currently only me, so I’m intentionally starting small. For the first month, I’ll send out 10 invites a week. Then, based on how everything’s going, I’ll increase it to 20 or 30 a week.&lt;/p&gt;

&lt;p&gt;The plan is to onboard people gradually, instead of opening the floodgates. Ever since adding the email subscribe form, I’ve been able to attract 1,042 people interested in Cushion—either for their own personal use or out of pure interest in following along. In the weeks leading up to the beta, I sent out the first email:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Howdy,&lt;/p&gt;

&lt;p&gt;A few months ago, you signed up to hear more about Cushion (&lt;a href=&quot;http://cushionapp.com&quot;&gt;http://cushionapp.com&lt;/a&gt;), the app I&amp;rsquo;m working on to bring peace of mind to freelancers. It&amp;rsquo;s almost ready for beta testing, so I wanted to reach out and ask a favor. &lt;/p&gt;

&lt;p&gt;I created a &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;short questionnaire&lt;/a&gt; to learn more about the folks who would want to use it and get a show of hands for those interested in beta testing. It&amp;rsquo;ll be super helpful for me and only take you a minute to fill out—I promise.&lt;/p&gt;

&lt;p&gt;-Jonnie&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want all of the communication with users and potential users to feel like I’m talking directly to them in person, which is why I try to write like I talk. Years of receiving insincere emails from product companies has left me with one of the fastest trigger fingers for deleting emails. I’ve also tried to learn from their mistakes and avoid what turned me off.&lt;/p&gt;

&lt;p&gt;The first pet peeve is when companies collect an optional name along with the email address and fall back to an empty string. This results in “Hey there ,”. In most cases, it’s a dead giveaway that this is a mass email trying to feel personal with either the space before the comma or the person entering a lowercase name. There’s nothing wrong with a simple “Hi”, or even “Howdy”.&lt;/p&gt;

&lt;p&gt;Secondly, product teams are often so engrossed in their app that when they finally send the initial email, they forget that the majority of people haven’t lived with the app for the past six months. Most of them probably saw it mentioned somewhere, signed up to hear more, then forgot about it—especially if it has a nonsensical name beginning with a “Z”. Make use of the first sentence to remind everyone what they signed up for.&lt;/p&gt;

&lt;p&gt;Lastly, I know a survey is a big ask for anyone, so instead of just assuming they’ll fill it out like a form at the DMV, I emphasized its brevity along with its importance to me. Hopefully that would be enough to get a good turnout. So, how’d it do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The email went out to &lt;strong&gt;1,007&lt;/strong&gt; people.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;999&lt;/strong&gt; of the emails were delivered &lt;em&gt;(99.21%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;730&lt;/strong&gt; people clicked the link to the survey &lt;em&gt;(72.49%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;498&lt;/strong&gt; people completed the survey &lt;em&gt;(49.45%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8&lt;/strong&gt; of the emails bounced &lt;em&gt;(0.79%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;12&lt;/strong&gt; people unsubscribed &lt;em&gt;(1.2%)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I never send out mass emails, so I don’t know if this is good, but considering I delete most of the ones I get, I’m pretty happy with the results.&lt;/p&gt;

&lt;p&gt;As for the &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;survey&lt;/a&gt;, it consisted of 10 questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you a solo freelancer?&lt;/li&gt;
&lt;li&gt;If not, how many people are on your team?&lt;/li&gt;
&lt;li&gt;What kind of work do you do?&lt;/li&gt;
&lt;li&gt;What do you use for project management, time-tracking, and invoicing?&lt;/li&gt;
&lt;li&gt;How many projects do you work on each year?&lt;/li&gt;
&lt;li&gt;How many invoices do you send each year?&lt;/li&gt;
&lt;li&gt;How do you bill?&lt;/li&gt;
&lt;li&gt;Are you interested in the paid beta?&lt;/li&gt;
&lt;li&gt;Are you okay with manually entering your data?&lt;/li&gt;
&lt;li&gt;Seinfeld or Friends?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results were overwhelming in the best way possible. Since there were a handful of options for each question, you can view the full results &lt;a href=&quot;https://cushionapp.typeform.com/report/mgayv7/aXGT&quot;&gt;here&lt;/a&gt;, but the gist is that the majority of potential users fit my exact description—solo freelancer, working on 6-15 projects a year, sending out 21-50 invoices a year. By designing Cushion to best fit my needs, I’ve been unknowingly targeting the demographic most-likely to use Cushion. This is huge for the initial plans of focusing on freelancers, but with a fair amount of small teams also showing interest, there’s an obvious direction of where to go next.&lt;/p&gt;

&lt;p&gt;This weekend, I plan to send out 10 more beta invites. If you want one sooner than later, &lt;a href=&quot;mailto:jonnie@cushionapp.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email marketing</title>
      <link>http://cushionapp.com/expenses/email-marketing</link>
      <pubDate>Sat, 30 Aug 2014 15:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/email-marketing</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-08-27</title>
      <link>http://cushionapp.com/journal/2014-08-27</link>
      <pubDate>Wed, 27 Aug 2014 10:41:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-27</guid>
      <description>&lt;p&gt;I’m so close. I spent this last week putting the finishing touches on Cushion. The majority of them surrounded small UX issues that would’ve definitely arisen out of the beta. I figured I’d rather tackle them now and have a more solid product going into the initial testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-income-input.gif&quot; alt=&quot;2014-08-27-income-input&quot;&gt; &lt;/p&gt;

&lt;p&gt;The most overlooked UX issue involved the income input fields. Up until now, it was a simple number-based input. It would balk at any character other than a number (even commas and dollar signs) and there was no currency formatting. With a history of using awful currency-based input fields and pulling my hair out when it’s not perfect for the server, I decided to go out of my way to make this easy. Upon exiting the input field, it’ll run a validation function that strips out any character that doesn’t belong and then reformats it, inserting a dollar sign and any commas if we’re in the thousands. Also, if the amount includes cents, it will format that as well or leave it out if it’s an even dollar amount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-success.gif&quot; alt=&quot;2014-08-27-success&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I realized I didn’t show any sort of success message to indicate that a project or invoice was created, updated, or deleted. I started to design a full-width banner that would appear in the form, but decided to take a step back. You should be able to see this message at all times. If you’re scrolled out of the view of the banner area, that doesn’t mean you should miss it. Also, upon creating a new project, you’re taken to the edit view, so this message should carry across views. Because of this, I opted to pin the message at the top. It slides in when needed, remains visible in all scroll positions, and slides out after a couple seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-due-net.gif&quot; alt=&quot;2014-08-27-due-net&quot;&gt; &lt;/p&gt;

&lt;p&gt;Lastly, I tackled the longest overdue feature—a net option for invoices. I attempted to start on this feature a dozen times, but always gave up after a while to direct my attention elsewhere. The tricky part was positioning the form elements, so it felt like a natural flow from the issue date to due date to paid date. If I placed the custom due date input below the dropdown, it would look completely off, but if that custom input was hidden until selected, it wouldn’t look half-bad. I took a tally for common invoice nets to use, including “upon receipt”, and added the final option for a specific date. Eventually, this will default to your net preference, so you will only need to change it if the client has their own net.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-08-19</title>
      <link>http://cushionapp.com/journal/2014-08-19</link>
      <pubDate>Tue, 19 Aug 2014 09:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-19</guid>
      <description>&lt;p&gt;Progress on Cushion has been amazing this past week. I feel like I’m past the point of shaping with play-doh and now using a fine-tooth chisel. I spent the majority of the time cleaning up the app, adding all of the parts that you forego when quickly prototyping, like error messaging and loading indicators. Even though these additions aren’t glamorous, they smooth out the experience. This is no longer a prototype—it’s a real app.&lt;/p&gt;

&lt;p&gt;The second half of the week was more exciting. After speaking with a fellow studiomate about what’s important for the scheduling timeline, I realized the top priority should be clarity. And, up until this point, the scheduling timeline has been anything but clear. My mistake was trying to represent timeframes with bars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-old-timeline.png&quot; alt=&quot;2014-08-19-old-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;First off, this makes no sense. With a bar, you &lt;em&gt;do&lt;/em&gt; have a start and an end, but they tell you nothing besides the start and end. What if I want to know if the project is ongoing? On top of that, there’s next to no information in between. Down the line, I’m certain we’ll need room for milestones and, potentially, other symbols.&lt;/p&gt;

&lt;p&gt;All of a sudden, these bars started feeling like they represented a value other than time, especially when it came to invoices. An invoice that dragged on for months felt like a big-paying invoice. A project that spanned half the year but only required one day a week looked just like a full-time project. This lack of clarity became a real problem, to the point where I didn’t trust the visual. I had to spend a minute translating it before I could react and notice any valuable information.&lt;/p&gt;

&lt;p&gt;Right when I was ready to leave for the day, I decided to quickly try out an idea. I scrapped the bars and started fresh. I tried to imagine a scheduling timeline without any history of what I have designed so far. Since it pertains dates and timespans, it should use dots and lines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-actual.png&quot; alt=&quot;2014-08-19-estimated-actual&quot;&gt; &lt;/p&gt;

&lt;p&gt;The dots will represent the dates. For projects, this currently includes the estimated start/finish dates and actual start/finish dates. For invoices, the issue date, due date, and paid date. Estimated dates shouldn’t carry the same weight as the actual dates because they’re not confirmed, so any estimated dates will have a different style—an outlined circle. Then, any actual date will be a solid fill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-hide-estimated.png&quot; alt=&quot;2014-08-19-hide-estimated&quot;&gt; &lt;/p&gt;

&lt;p&gt;This felt like a lot of dots. Then I realized we could imply the existence of the estimated dates through the style of the line. If a project starts late, the line from the estimated start date to the actual start date should be a lighter version of the working line. That alone tells what we want to know, but then we can show the specific dates upon hovering the project. This way, we can establish an overall timeline UX of “hover to show more information”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-future-project.png&quot; alt=&quot;2014-08-19-future-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;Hiding the estimated dates outside of hover also helps us when it comes to future projects. With no actual dates, these future projects are represented by only a light line—clearly showing that a project spans that timeframe, but it hasn’t been anchored with the weight of actual dates. Now there’s an obvious difference between a past project and a future project. But, what about current projects?&lt;/p&gt;

&lt;p&gt;With the previous bar design, we had no clear way of knowing which projects you were actively working on or which invoices were in the pipeline. I wanted to be able to look at the timeline and immediately know how many projects were active and which ones. With this new design, I introduced a new element—an arrow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-project.png&quot; alt=&quot;2014-08-19-active-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For any project or invoice that spans the current date, an arrow will appear on that line. If a project has started, the line up until that arrow will be solid to show that you’ve actively worked on it up until now. The line after the arrow will remain lighter to indicate that you haven’t worked through that time yet, but it can potentially span that far.&lt;/p&gt;

&lt;p&gt;An arrow was the first thing that came to mind as a way of showing activity and it worked right off the bat. I can clearly distinguish these projects from the others and I don’t need a label because it pointing in the direction of time is all we need to get the point across.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-project.png&quot; alt=&quot;2014-08-19-dragged-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For projects that drag on, I reclaimed the hash pattern from the previous design. I still think it works with this new look as long as it’s the only place where we use a hash pattern. Also, like before, the pattern animates if an invoice is currently late. The movement is subtle enough to instill a sense of urgency, but won’t send you into panic mode.&lt;/p&gt;

&lt;p&gt;In the previous post, I touched on a new tooltip design for the scheduling timeline, showing more useful information than just a client/project label. With this new design, I decided to take it a step further and show even more. Since we’re now working with several new elements—dots, lines, and arrows—we could utilize all three of these to tell us more about projects and invoices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-finish-tooltip.png&quot; alt=&quot;2014-08-19-estimated-finish-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For dots, show the date that it represents and reiterate whether it’s estimated or not. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-tooltip.png&quot; alt=&quot;2014-08-19-dragged-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For lines, indicate the duration of the line and what it represents—early, late, drag, active, etc. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-date-tooltip.png&quot; alt=&quot;2014-08-19-active-date-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;And for arrows, simply show that a project or invoice is active as of the current date. These new details help in revealing the additional information you would want to know, but it also keeps us from needing an additional key to reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-new-timeline.png&quot; alt=&quot;2014-08-19-new-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;After using the new scheduling timeline design for the past few days, I feel so much more confident and on top of things. I honestly can’t believe I even considered the previous design in the first place, but at least I know I’m making progress.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
