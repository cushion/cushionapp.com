<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Cushion</title>
    <link>http://cushionapp.com</link>
    <pubDate>Mon, 03 Nov 2014 03:08:38 +0000</pubDate>
    
    <item>
      <title>Support</title>
      <link>http://cushionapp.com/expenses/support</link>
      <pubDate>Sun, 02 Nov 2014 21:57:00 -0500</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/support</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-29</title>
      <link>http://cushionapp.com/journal/2014-10-29</link>
      <pubDate>Wed, 29 Oct 2014 11:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-29</guid>
      <description>&lt;p&gt;This past week, I added two big features. Not big in the sense of workload or scale, but big in terms of value. Both are incredibly useful and have personally made Cushion feel like a more serious contender.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archive.png&quot; alt=&quot;2014-10-29-archive&quot;&gt; &lt;/p&gt;

&lt;p&gt;The first is archiving. Previously, every client, project, and invoice you created would always remain present, regardless of whether it were still active in your day-to-day. Nearing the end of the year, that 1-day project you worked on in January would still appear aside your current projects. Now, you have the ability to archive items.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archiving.gif&quot; alt=&quot;2014-10-29-archiving&quot;&gt; &lt;/p&gt;

&lt;p&gt;Archiving does two things. In the table view, archiving allows you to toggle the visibility of any archived item using a switch in the top left. In project forms and invoice forms, archived items are filtered from the dropdown menus. With this, you no longer need to sift through &lt;em&gt;every&lt;/em&gt; project when creating a new invoice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-archived-by-client.png&quot; alt=&quot;2014-10-29-archived-by-client&quot;&gt; &lt;/p&gt;

&lt;p&gt;Archiving also cascades. This means that if you archive a project, all of its invoices will be marked as archived, too. And, if you archive a client, all of its projects &lt;em&gt;and&lt;/em&gt; invoices will be marked as archived. This is not only useful for old projects, but also for potential projects that are either on hold or so far away that you don’t need to think about them yet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-29-gain-loss.png&quot; alt=&quot;2014-10-29-gain-loss&quot;&gt; &lt;/p&gt;

&lt;p&gt;The second super useful feature is a new column in the budget view, called “gain/loss”. This column takes your projects’ estimates and compares them to your actual income for the projects, presenting it in an easy-to-read percentage. The percentage is then colored green for positive values and red for negative values. Even without reading the numbers, you’ll have an idea of how well you’re estimating.&lt;/p&gt;

&lt;p&gt;Just like income columns, the “gain/loss” column has a “sum” in the table footers. It’s not just a simple sum of each row’s percentage, but rather a comparison of your total estimates to your total income. If it’s in the red, you know you either need to better estimate your projects or bump up your rate. This column also exists in the client budget view, so you can see per-client how close or far off you were.&lt;/p&gt;

&lt;p&gt;I’m really excited about these new features as they add even more value to an app that has become indispensable to my workflow. Starting in November, I’m doubling the number of invites I send out for the paid beta this month, so if you’re interested in using Cushion early, &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-28</title>
      <link>http://cushionapp.com/changelog/2014-10-28</link>
      <pubDate>Tue, 28 Oct 2014 19:28:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-28</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-27</title>
      <link>http://cushionapp.com/changelog/2014-10-27</link>
      <pubDate>Mon, 27 Oct 2014 20:25:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-27</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-23</title>
      <link>http://cushionapp.com/changelog/2014-10-23</link>
      <pubDate>Thu, 23 Oct 2014 17:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-23</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-21</title>
      <link>http://cushionapp.com/journal/2014-10-21</link>
      <pubDate>Tue, 21 Oct 2014 21:38:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-21</guid>
      <description>&lt;p&gt;&lt;img src=&quot;/assets/2014-10-21-goals.png&quot; alt=&quot;2014-10-21-goals&quot;&gt; &lt;/p&gt;

&lt;p&gt;A few weeks ago, a beta user suggested the idea of multiple financial goals for the budget timeline. At the time, there was only one goal in Cushion, which made it somewhat difficult to picture the year. Do I set the goal to what I need to make or what I want to make?—these are two very different goals. Because of this constant confusion, I replaced the single goal with three—minimum, target, and stretch.&lt;/p&gt;

&lt;p&gt;When considering your finances, it’s good to think of what you absolutely need to make to stay alive and pay the bills—your bare minimum. From there, you can aim for a higher target that allows you to do more than just survive, like go out to eat more often or take a cab instead of the subway. And, if you reach that target, you can then try for more, which might be enough to add a vacation to your year.&lt;/p&gt;

&lt;p&gt;These goals are important in the freelance life because there’s really no cap on how much you can make. Since you have no salary, you can decide how much you want to make beyond covering your expenses, granted the work is available. If you want to overload your schedule for a month in order to take a month off, you can do that. If you want to work consistently and make a killing, that’s cool, too.&lt;/p&gt;

&lt;p&gt;Personally, I don’t do a great job of aiming high. I tend to make enough to pay my minimum, then I invest the extra time in my personal projects. Recently, I’ve been investing any income over my minimum into buying more of my own time, as if I’m my own client. I’m betting on myself and my productivity. Maybe two weeks of full-time Cushion could amount to more than a two-week client gig. And maybe, with Cushion, I could reach my stretch goal all on my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-21</title>
      <link>http://cushionapp.com/changelog/2014-10-21</link>
      <pubDate>Tue, 21 Oct 2014 11:04:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-21</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-20</title>
      <link>http://cushionapp.com/changelog/2014-10-20</link>
      <pubDate>Mon, 20 Oct 2014 21:34:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-20</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-16</title>
      <link>http://cushionapp.com/changelog/2014-10-16</link>
      <pubDate>Fri, 17 Oct 2014 00:10:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-16</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-16</title>
      <link>http://cushionapp.com/journal/2014-10-16</link>
      <pubDate>Thu, 16 Oct 2014 08:36:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-16</guid>
      <description>&lt;p&gt;In the early stages of building Cushion, everything was based upon a year-long timeline view. With one look, you could see a quick and easy-to-digest glimpse of your year. When are you next available? Where do you have pockets of time to fit another project? Wow—that project really took that long? After living with this scale for a while, I wondered what I could do with a more magnified view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-data.png&quot; alt=&quot;2014-10-16-timeline-data&quot;&gt; &lt;/p&gt;

&lt;p&gt;If we zoom in to a specific month on the timeline, we begin to give more meaning to the data. All of a sudden, a 4-day project that was just a blip on the year timeline expands to represent the true weight of those four full days. Zoomed out, it’s easy to see little difference between two lengths of time that are drastically different on the day-to-day scale, like 2 weeks versus 3 weeks, but in a month view, this is huge!&lt;/p&gt;

&lt;p&gt;I started to think of ways to actually zoom into the timeline. Of course, the line segments would scale horizontally, but does it really need to scale proportionally on the vertical end as well?—I don’t think so. In my eyes, it looks much better this way &lt;em&gt;and&lt;/em&gt; maintains the same timeline height as the year view—allowing the same amount of information to be seen underneath without a jarring effect on the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-overflow.png&quot; alt=&quot;2014-10-16-timeline-overflow&quot;&gt; &lt;/p&gt;

&lt;p&gt;When I first built the timeline view, I added a project that spanned two years and noticed a bug. With the way I coded the view, the knocked-out background of the timeline didn’t expand to account for the line segment. Instead, the line segment ran off the edge of the background, reaching the edge of the window. This wasn’t the intended behavior, but I immediately fell in love with it. The knocked-out background created a distinct boundary to the timeline, but didn’t hide any information beyond this boundary.&lt;/p&gt;

&lt;p&gt;Returning to the zoom, this undocumented feature became the perfect tie of consistency between the two scales. When you switch between month and year views, the boundary doesn’t move a pixel.&lt;/p&gt;

&lt;p&gt;The problem now was that the timeline labels for the year view, represented by months, needed to be replaced with days in order to be relevant to the new context. However, since I still wanted a dead-simple way to move from month to month, I didn’t want to get rid of the month labels. I went down a dark hole of bad designs, like a second row of labels that pushed the month labels down. It was a awful.&lt;/p&gt;

&lt;p&gt;Then, I considered the top of the timeline. At first, I discounted this idea because I just assumed it would clutter the UI. I gave it a shot, though. Sometimes, it’s important to explore directions that you would typically disregard just to say that you tried them. Surprisingly, this direction had legs. It wasn’t perfect at first, but I knew something was there if I just chiseled deep enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-10-16-timeline-month-view.png&quot;&gt;&lt;img src=&quot;/assets/2014-10-16-timeline-month-view.png&quot; alt=&quot;2014-10-16-timeline-month-view&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of mimicking the same label design as the months, which represented spans of time, I centered the “tick” to point to the given day. And, because projects don’t factor time of day (yet), I centered the segment dots on each day block, rather than anchoring to an edge. Finally, to better separate each day, I added a slightly greyed background to the even days.&lt;/p&gt;

&lt;p&gt;Now, all of this would look great on its own, but the transition of switching between the views should look even better. Luckily, each spot I wanted to animate was as easy as adding a CSS3 transition. The line segments scale based on the number of days in the timeline to the number of days in the selected month, the month labels fade in and pan up from behind the timeline, and the even day backgrounds simply fade in.&lt;/p&gt;

&lt;div class='video-outer'&gt;
    &lt;div class='video-inner' style='padding-bottom: 34%'&gt;
        &lt;video width=&quot;100%&quot; poster=&quot;/assets/2014-10-16-timeline-zoom.png&quot; autoplay=&quot;autoplay&quot; loop=&quot;loop&quot; controls=&quot;controls&quot; tabindex=&quot;0&quot;&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot; type=&quot;video/mp4&quot; /&gt;
            &lt;source src=&quot;/assets/2014-10-16-timeline-zoom.ogv&quot; type=&quot;video/ogg&quot; /&gt;
            Video tag not supported. Download the video &lt;a href=&quot;/assets/2014-10-16-timeline-zoom.mp4&quot;&gt;here&lt;/a&gt;.
        &lt;/video&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Scaling the line segments was the trickiest part, not because of the resizing, but because of the origin point from where to resize. Everything in the timeline is positioned and scaled based on a percentage of its day in the timeline compared to the total days in the timeline. For example, February 1st on a year timeline is located at 8.767%. I chose this route because I wanted the timeline to be able to scale down properly, if Cushion were to be responsive. Fortunately, it made my life so much easier with timeline zooming, too. Instead of scaling each line segement individually, I just need to scale the entire timeline and pan.&lt;/p&gt;

&lt;p&gt;The origin point is crucial because if you scale the timeline while panning it and not centering the origin point, the timeline &lt;em&gt;appears&lt;/em&gt; to pan before scaling. At first, I thought this was just a side effect of easing two attributes, but even when transitioned linearly, it didn’t look right. Luckily, centering the origin point was a non-issue, so everything came together in the end without needing to include JS for the animation.&lt;/p&gt;

&lt;p&gt;I couldn’t be happier with my first stab at timeline zooming. Not only because it turned out well, but also because it opens up the possibility of a few other features I want to implement. The first is simply an in-between view for zooming in on a quarter of the year. The other feature, however, is &lt;em&gt;much&lt;/em&gt; more involved. I’ll save it for another post.&lt;/p&gt;

&lt;p&gt;If you’re interested in participating in the paid beta, send me your email on &lt;a href=&quot;http://twitter.com/cushionapp&quot;&gt;Twitter&lt;/a&gt; and I’ll send you an invite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-15</title>
      <link>http://cushionapp.com/changelog/2014-10-15</link>
      <pubDate>Wed, 15 Oct 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-15</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-13</title>
      <link>http://cushionapp.com/journal/2014-10-13</link>
      <pubDate>Mon, 13 Oct 2014 20:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-10-13</guid>
      <description>&lt;p&gt;Since I started building apps back in 2007, I’ve been keeping a list. This is a list of technical pitfalls to avoid when building a new app. Here are a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;timezones&lt;/li&gt;
&lt;li&gt;daylight saving time&lt;/li&gt;
&lt;li&gt;shoe sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list has grown over the years and I thought I was in the clear with Cushion until I discovered I needed multiple currencies. Currency! Normally, this wouldn’t be a problem, as it’s just a matter of formatting, but I quickly realized a much bigger problem—combining currencies.&lt;/p&gt;

&lt;p&gt;Looking ahead to integration with other services, I noticed that Harvest allows varying currencies per client &lt;em&gt;and&lt;/em&gt; per invoice. Freshbooks only varies per client, but allows switching a client’s default currency for current and future invoices. With this in mind, along with Cushion’s interface, I’ll need to combine currencies both visually and in table form.&lt;/p&gt;

&lt;p&gt;The table side of combining currencies is the easier of the two. Instead of trying to calculate a total based on the exchange rate of whenever you received a specific invoice, you can simply show multiple totals per currency. It won’t look as good as a single total, but it’s a much better route than driving down the road to insanity via exchange rates.&lt;/p&gt;

&lt;p&gt;On the visual side, specifically the budget timeline, I’m in a bit of a pickle. These timelines are based on a financial goal the user sets in the beginning, which is of a single currency. This means that if I want to visualize a variety of currencies, I’ll need a goal per currency, which is not going to happen.&lt;/p&gt;

&lt;p&gt;I have a few ideas of how to get around this, but I’m getting ahead of myself. As a first step, I just need the ability to change the default currency per user. This is an easy one, so I’m happy to say it’s already done. I found a Ruby gem, called &lt;a href=&quot;https://github.com/RubyMoney/money&quot;&gt;Money&lt;/a&gt;, that provides a thorough list of currencies, along with their symbols, symbol positions, thousand separator, and decimal separator. On the front-end, I can still use &lt;a href=&quot;https://github.com/openexchangerates/accounting.js&quot;&gt;Accounting.js&lt;/a&gt;—all I need to do is provide the currency settings from the backend.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-10-13</title>
      <link>http://cushionapp.com/changelog/2014-10-13</link>
      <pubDate>Mon, 13 Oct 2014 15:17:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-13</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-12</title>
      <link>http://cushionapp.com/changelog/2014-10-12</link>
      <pubDate>Sun, 12 Oct 2014 20:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-12</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-04</title>
      <link>http://cushionapp.com/changelog/2014-10-04</link>
      <pubDate>Thu, 02 Oct 2014 17:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-04</guid>
      <description></description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://cushionapp.com/expenses/metrics</link>
      <pubDate>Wed, 01 Oct 2014 10:48:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/metrics</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-01</title>
      <link>http://cushionapp.com/changelog/2014-10-01</link>
      <pubDate>Wed, 01 Oct 2014 00:32:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-01</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-29</title>
      <link>http://cushionapp.com/changelog/2014-09-29</link>
      <pubDate>Tue, 30 Sep 2014 10:11:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-29</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-26</title>
      <link>http://cushionapp.com/journal/2014-09-26</link>
      <pubDate>Fri, 26 Sep 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-26</guid>
      <description>&lt;p&gt;These past couple weeks, I’ve been focusing on making Cushion feel like a legit app. To me, this entails adding all the little parts that can be easily skipped early on, like the ability to change your password. For a public app, these are essential, but in my eyes, you can go without them for a week or so when holding a private beta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-preferences.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-preferences.png&quot; alt=&quot;2014-09-26-preferences&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alongside smoothing out the experience, I started building in convenience features, like preferences. Since getting Cushion in the hands of others, there has been an obvious need for certain defaults, so when a user fills out a form, they don’t find them setting the same value on the same field every single time. &lt;/p&gt;

&lt;p&gt;The most apparent of these fields was the invoice’s relative due date, or net. Most freelancers use the same net for every project and they all vary in generosity, from “net 30” to “due upon receipt”. Now, I have a preference for this field, so whenever the user creates a new invoice, the net is that value by default.&lt;/p&gt;

&lt;p&gt;With new additions, it’s good to hold back from implementing them until you have at least two examples to use. For example, I wouldn’t add a preferences section if I only had this one preference. That’s why I added two more—default tab and default view.&lt;/p&gt;

&lt;p&gt;For me, the projects section with the schedule view is the page I use the most, but this isn’t the case for everyone. If you’re less about scheduling and more about accounting, you might live in the invoices tab with the budget view. With these new default tab and view preferences, any time you switch from the account/preferences section of Cushion back to the timeline section, it will take you to your default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-account.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-account.png&quot; alt=&quot;2014-09-26-account&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of accounts and preference, I don’t think I ever mentioned this second side of Cushion. From the beginning, users have only had access to the timeline section, which consists of the client, project, and invoice tabs. Now that I’m adding all the necessary parts of a real app, I established a top level navigation for switching between the timeline section and the account/settings/whatever-you-want-to-call-it section. This navigation system works pretty well so far, allowing a new set of view level tabs for switching between account information and preferences. For now, these are the only two tabs, but eventually, we will have a few more for hooks and integrations—the fun stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-update-notification.png&quot; alt=&quot;2014-09-26-update-notification&quot;&gt; &lt;/p&gt;

&lt;p&gt;Tacking onto the legitamcy of Cushion, I built a dead-simple update notification alert for users to know when I deployed a new version. It slides in from the top, just like success notifications, but it’s blue and refreshes the page upon clicking it. The downside of a web app is that a user only sees what they loaded last. This means, if they haven’t refreshed the browser in weeks, which has happened with past apps I’ve worked on, they will be using an older, potentially incompatible version.&lt;/p&gt;

&lt;p&gt;I didn’t want to be wasteful and poll for changes. Instead, I decided to use a custom response header &lt;code&gt;X-App-Version&lt;/code&gt; with each API response. This value is an environment variable that I set after deploying a new version. Because the app checks the difference upon receiving a new response, like switching views, we won’t experience any of the issues we’d see from something like refreshing upon a date change—the alerts are spread out more.&lt;/p&gt;

&lt;p&gt;I’ve been on a few betas that also use an update notification, but I noticed that they often forget to include what’s new. I get excited for updates, but then I need to spend a few minutes digging through the app, looking for changes. For Cushion, I created a new &lt;a href=&quot;/changelog&quot;&gt;changelog&lt;/a&gt; page, which the alert links to. The changelog runs on the same static system that this journal runs on, so if I spot a typo, I don’t have to prompt the user of an update by deploying the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-font-table.png&quot; alt=&quot;2014-09-26-font-table&quot;&gt; &lt;/p&gt;

&lt;p&gt;The last bit of progress I’ll cover in this post is the obvious font change. I’ve been keeping this in the back of my mind since the beginning, knowing I would need to eventually pick one other than Helvetica Neue. After literally hours of switching between several fonts and just staring at the screen, I decided to go with &lt;a href=&quot;http://justanotherfoundry.com/facit&quot;&gt;Facit&lt;/a&gt; by &lt;a href=&quot;http://justanotherfoundry.com/&quot;&gt;Just Another Foundry&lt;/a&gt;. The decision was tough, but in the end, I picked Facit for its personality, solidity, and beautiful italics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-tooltip.png&quot; alt=&quot;2014-09-26-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;The typeface has a very wide range of weights, which work incredibly well in Cushion’s interface. I’ve been able to find areas in Cushion that benefit greatly from a variance in thickness, like the timeline tooltips. Overall, I think like Facit gets me closer to that solid, reliable feel that I want users to experience when using the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-09-25</title>
      <link>http://cushionapp.com/changelog/2014-09-25</link>
      <pubDate>Thu, 25 Sep 2014 23:25:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-25</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
