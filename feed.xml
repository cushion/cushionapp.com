<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Cushion</title>
    <link>http://cushionapp.com</link>
    <pubDate>Mon, 13 Oct 2014 00:35:33 +0000</pubDate>
    
    <item>
      <title>2014-10-12</title>
      <link>http://cushionapp.com/changelog/2014-10-12</link>
      <pubDate>Sun, 12 Oct 2014 20:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-12</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-04</title>
      <link>http://cushionapp.com/changelog/2014-10-04</link>
      <pubDate>Thu, 02 Oct 2014 17:40:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-04</guid>
      <description></description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>http://cushionapp.com/expenses/metrics</link>
      <pubDate>Wed, 01 Oct 2014 10:48:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/metrics</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-10-01</title>
      <link>http://cushionapp.com/changelog/2014-10-01</link>
      <pubDate>Wed, 01 Oct 2014 00:32:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-10-01</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-29</title>
      <link>http://cushionapp.com/changelog/2014-09-29</link>
      <pubDate>Tue, 30 Sep 2014 10:11:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-29</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-26</title>
      <link>http://cushionapp.com/journal/2014-09-26</link>
      <pubDate>Fri, 26 Sep 2014 09:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-26</guid>
      <description>&lt;p&gt;These past couple weeks, I’ve been focusing on making Cushion feel like a legit app. To me, this entails adding all the little parts that can be easily skipped early on, like the ability to change your password. For a public app, these are essential, but in my eyes, you can go without them for a week or so when holding a private beta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-preferences.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-preferences.png&quot; alt=&quot;2014-09-26-preferences&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alongside smoothing out the experience, I started building in convenience features, like preferences. Since getting Cushion in the hands of others, there has been an obvious need for certain defaults, so when a user fills out a form, they don’t find them setting the same value on the same field every single time. &lt;/p&gt;

&lt;p&gt;The most apparent of these fields was the invoice’s relative due date, or net. Most freelancers use the same net for every project and they all vary in generosity, from “net 30” to “due upon receipt”. Now, I have a preference for this field, so whenever the user creates a new invoice, the net is that value by default.&lt;/p&gt;

&lt;p&gt;With new additions, it’s good to hold back from implementing them until you have at least two examples to use. For example, I wouldn’t add a preferences section if I only had this one preference. That’s why I added two more—default tab and default view.&lt;/p&gt;

&lt;p&gt;For me, the projects section with the schedule view is the page I use the most, but this isn’t the case for everyone. If you’re less about scheduling and more about accounting, you might live in the invoices tab with the budget view. With these new default tab and view preferences, any time you switch from the account/preferences section of Cushion back to the timeline section, it will take you to your default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-09-26-account.png&quot;&gt;&lt;img src=&quot;/assets/2014-09-26-account.png&quot; alt=&quot;2014-09-26-account&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of accounts and preference, I don’t think I ever mentioned this second side of Cushion. From the beginning, users have only had access to the timeline section, which consists of the client, project, and invoice tabs. Now that I’m adding all the necessary parts of a real app, I established a top level navigation for switching between the timeline section and the account/settings/whatever-you-want-to-call-it section. This navigation system works pretty well so far, allowing a new set of view level tabs for switching between account information and preferences. For now, these are the only two tabs, but eventually, we will have a few more for hooks and integrations—the fun stuff.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-update-notification.png&quot; alt=&quot;2014-09-26-update-notification&quot;&gt; &lt;/p&gt;

&lt;p&gt;Tacking onto the legitamcy of Cushion, I built a dead-simple update notification alert for users to know when I deployed a new version. It slides in from the top, just like success notifications, but it’s blue and refreshes the page upon clicking it. The downside of a web app is that a user only sees what they loaded last. This means, if they haven’t refreshed the browser in weeks, which has happened with past apps I’ve worked on, they will be using an older, potentially incompatible version.&lt;/p&gt;

&lt;p&gt;I didn’t want to be wasteful and poll for changes. Instead, I decided to use a custom response header &lt;code&gt;X-App-Version&lt;/code&gt; with each API response. This value is an environment variable that I set after deploying a new version. Because the app checks the difference upon receiving a new response, like switching views, we won’t experience any of the issues we’d see from something like refreshing upon a date change—the alerts are spread out more.&lt;/p&gt;

&lt;p&gt;I’ve been on a few betas that also use an update notification, but I noticed that they often forget to include what’s new. I get excited for updates, but then I need to spend a few minutes digging through the app, looking for changes. For Cushion, I created a new &lt;a href=&quot;/changelog&quot;&gt;changelog&lt;/a&gt; page, which the alert links to. The changelog runs on the same static system that this journal runs on, so if I spot a typo, I don’t have to prompt the user of an update by deploying the change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-font-table.png&quot; alt=&quot;2014-09-26-font-table&quot;&gt; &lt;/p&gt;

&lt;p&gt;The last bit of progress I’ll cover in this post is the obvious font change. I’ve been keeping this in the back of my mind since the beginning, knowing I would need to eventually pick one other than Helvetica Neue. After literally hours of switching between several fonts and just staring at the screen, I decided to go with &lt;a href=&quot;http://justanotherfoundry.com/facit&quot;&gt;Facit&lt;/a&gt; by &lt;a href=&quot;http://justanotherfoundry.com/&quot;&gt;Just Another Foundry&lt;/a&gt;. The decision was tough, but in the end, I picked Facit for its personality, solidity, and beautiful italics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-09-26-tooltip.png&quot; alt=&quot;2014-09-26-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;The typeface has a very wide range of weights, which work incredibly well in Cushion’s interface. I’ve been able to find areas in Cushion that benefit greatly from a variance in thickness, like the timeline tooltips. Overall, I think like Facit gets me closer to that solid, reliable feel that I want users to experience when using the app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-09-25</title>
      <link>http://cushionapp.com/changelog/2014-09-25</link>
      <pubDate>Thu, 25 Sep 2014 23:25:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-25</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-22</title>
      <link>http://cushionapp.com/changelog/2014-09-22</link>
      <pubDate>Mon, 22 Sep 2014 15:52:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-22</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-20</title>
      <link>http://cushionapp.com/changelog/2014-09-20</link>
      <pubDate>Sat, 20 Sep 2014 19:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-20</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-17</title>
      <link>http://cushionapp.com/changelog/2014-09-17</link>
      <pubDate>Wed, 17 Sep 2014 21:47:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/changelog/2014-09-17</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-09-12</title>
      <link>http://cushionapp.com/journal/2014-09-12</link>
      <pubDate>Fri, 12 Sep 2014 08:49:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-09-12</guid>
      <description>&lt;p&gt;These past couple weeks have been intense. Last weekend, I sent out the first batch of beta invites. I say “batch” for consistency moving forward, but it was only 10. I want to be deliberate with how I bring users into the app, considering Cushion is currently only me, so I’m intentionally starting small. For the first month, I’ll send out 10 invites a week. Then, based on how everything’s going, I’ll increase it to 20 or 30 a week.&lt;/p&gt;

&lt;p&gt;The plan is to onboard people gradually, instead of opening the floodgates. Ever since adding the email subscribe form, I’ve been able to attract 1,042 people interested in Cushion—either for their own personal use or out of pure interest in following along. In the weeks leading up to the beta, I sent out the first email:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Howdy,&lt;/p&gt;

&lt;p&gt;A few months ago, you signed up to hear more about Cushion (&lt;a href=&quot;http://cushionapp.com&quot;&gt;http://cushionapp.com&lt;/a&gt;), the app I&amp;rsquo;m working on to bring peace of mind to freelancers. It&amp;rsquo;s almost ready for beta testing, so I wanted to reach out and ask a favor. &lt;/p&gt;

&lt;p&gt;I created a &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;short questionnaire&lt;/a&gt; to learn more about the folks who would want to use it and get a show of hands for those interested in beta testing. It&amp;rsquo;ll be super helpful for me and only take you a minute to fill out—I promise.&lt;/p&gt;

&lt;p&gt;-Jonnie&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want all of the communication with users and potential users to feel like I’m talking directly to them in person, which is why I try to write like I talk. Years of receiving insincere emails from product companies has left me with one of the fastest trigger fingers for deleting emails. I’ve also tried to learn from their mistakes and avoid what turned me off.&lt;/p&gt;

&lt;p&gt;The first pet peeve is when companies collect an optional name along with the email address and fall back to an empty string. This results in “Hey there ,”. In most cases, it’s a dead giveaway that this is a mass email trying to feel personal with either the space before the comma or the person entering a lowercase name. There’s nothing wrong with a simple “Hi”, or even “Howdy”.&lt;/p&gt;

&lt;p&gt;Secondly, product teams are often so engrossed in their app that when they finally send the initial email, they forget that the majority of people haven’t lived with the app for the past six months. Most of them probably saw it mentioned somewhere, signed up to hear more, then forgot about it—especially if it has a nonsensical name beginning with a “Z”. Make use of the first sentence to remind everyone what they signed up for.&lt;/p&gt;

&lt;p&gt;Lastly, I know a survey is a big ask for anyone, so instead of just assuming they’ll fill it out like a form at the DMV, I emphasized its brevity along with its importance to me. Hopefully that would be enough to get a good turnout. So, how’d it do?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The email went out to &lt;strong&gt;1,007&lt;/strong&gt; people.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;999&lt;/strong&gt; of the emails were delivered &lt;em&gt;(99.21%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;730&lt;/strong&gt; people clicked the link to the survey &lt;em&gt;(72.49%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;498&lt;/strong&gt; people completed the survey &lt;em&gt;(49.45%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8&lt;/strong&gt; of the emails bounced &lt;em&gt;(0.79%)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;12&lt;/strong&gt; people unsubscribed &lt;em&gt;(1.2%)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I never send out mass emails, so I don’t know if this is good, but considering I delete most of the ones I get, I’m pretty happy with the results.&lt;/p&gt;

&lt;p&gt;As for the &lt;a href=&quot;https://cushionapp.typeform.com/to/mgayv7&quot;&gt;survey&lt;/a&gt;, it consisted of 10 questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you a solo freelancer?&lt;/li&gt;
&lt;li&gt;If not, how many people are on your team?&lt;/li&gt;
&lt;li&gt;What kind of work do you do?&lt;/li&gt;
&lt;li&gt;What do you use for project management, time-tracking, and invoicing?&lt;/li&gt;
&lt;li&gt;How many projects do you work on each year?&lt;/li&gt;
&lt;li&gt;How many invoices do you send each year?&lt;/li&gt;
&lt;li&gt;How do you bill?&lt;/li&gt;
&lt;li&gt;Are you interested in the paid beta?&lt;/li&gt;
&lt;li&gt;Are you okay with manually entering your data?&lt;/li&gt;
&lt;li&gt;Seinfeld or Friends?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The results were overwhelming in the best way possible. Since there were a handful of options for each question, you can view the full results &lt;a href=&quot;https://cushionapp.typeform.com/report/mgayv7/aXGT&quot;&gt;here&lt;/a&gt;, but the gist is that the majority of potential users fit my exact description—solo freelancer, working on 6-15 projects a year, sending out 21-50 invoices a year. By designing Cushion to best fit my needs, I’ve been unknowingly targeting the demographic most-likely to use Cushion. This is huge for the initial plans of focusing on freelancers, but with a fair amount of small teams also showing interest, there’s an obvious direction of where to go next.&lt;/p&gt;

&lt;p&gt;This weekend, I plan to send out 10 more beta invites. If you want one sooner than later, &lt;a href=&quot;mailto:jonnie@cushionapp.com&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email marketing</title>
      <link>http://cushionapp.com/expenses/email-marketing</link>
      <pubDate>Sat, 30 Aug 2014 15:35:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/email-marketing</guid>
      <description></description>
    </item>
    
    <item>
      <title>2014-08-27</title>
      <link>http://cushionapp.com/journal/2014-08-27</link>
      <pubDate>Wed, 27 Aug 2014 10:41:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-27</guid>
      <description>&lt;p&gt;I’m so close. I spent this last week putting the finishing touches on Cushion. The majority of them surrounded small UX issues that would’ve definitely arisen out of the beta. I figured I’d rather tackle them now and have a more solid product going into the initial testing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-income-input.gif&quot; alt=&quot;2014-08-27-income-input&quot;&gt; &lt;/p&gt;

&lt;p&gt;The most overlooked UX issue involved the income input fields. Up until now, it was a simple number-based input. It would balk at any character other than a number (even commas and dollar signs) and there was no currency formatting. With a history of using awful currency-based input fields and pulling my hair out when it’s not perfect for the server, I decided to go out of my way to make this easy. Upon exiting the input field, it’ll run a validation function that strips out any character that doesn’t belong and then reformats it, inserting a dollar sign and any commas if we’re in the thousands. Also, if the amount includes cents, it will format that as well or leave it out if it’s an even dollar amount.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-success.gif&quot; alt=&quot;2014-08-27-success&quot;&gt; &lt;/p&gt;

&lt;p&gt;Next, I realized I didn’t show any sort of success message to indicate that a project or invoice was created, updated, or deleted. I started to design a full-width banner that would appear in the form, but decided to take a step back. You should be able to see this message at all times. If you’re scrolled out of the view of the banner area, that doesn’t mean you should miss it. Also, upon creating a new project, you’re taken to the edit view, so this message should carry across views. Because of this, I opted to pin the message at the top. It slides in when needed, remains visible in all scroll positions, and slides out after a couple seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-27-due-net.gif&quot; alt=&quot;2014-08-27-due-net&quot;&gt; &lt;/p&gt;

&lt;p&gt;Lastly, I tackled the longest overdue feature—a net option for invoices. I attempted to start on this feature a dozen times, but always gave up after a while to direct my attention elsewhere. The tricky part was positioning the form elements, so it felt like a natural flow from the issue date to due date to paid date. If I placed the custom due date input below the dropdown, it would look completely off, but if that custom input was hidden until selected, it wouldn’t look half-bad. I took a tally for common invoice nets to use, including “upon receipt”, and added the final option for a specific date. Eventually, this will default to your net preference, so you will only need to change it if the client has their own net.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-08-19</title>
      <link>http://cushionapp.com/journal/2014-08-19</link>
      <pubDate>Tue, 19 Aug 2014 09:09:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-19</guid>
      <description>&lt;p&gt;Progress on Cushion has been amazing this past week. I feel like I’m past the point of shaping with play-doh and now using a fine-tooth chisel. I spent the majority of the time cleaning up the app, adding all of the parts that you forego when quickly prototyping, like error messaging and loading indicators. Even though these additions aren’t glamorous, they smooth out the experience. This is no longer a prototype—it’s a real app.&lt;/p&gt;

&lt;p&gt;The second half of the week was more exciting. After speaking with a fellow studiomate about what’s important for the scheduling timeline, I realized the top priority should be clarity. And, up until this point, the scheduling timeline has been anything but clear. My mistake was trying to represent timeframes with bars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-old-timeline.png&quot; alt=&quot;2014-08-19-old-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;First off, this makes no sense. With a bar, you &lt;em&gt;do&lt;/em&gt; have a start and an end, but they tell you nothing besides the start and end. What if I want to know if the project is ongoing? On top of that, there’s next to no information in between. Down the line, I’m certain we’ll need room for milestones and, potentially, other symbols.&lt;/p&gt;

&lt;p&gt;All of a sudden, these bars started feeling like they represented a value other than time, especially when it came to invoices. An invoice that dragged on for months felt like a big-paying invoice. A project that spanned half the year but only required one day a week looked just like a full-time project. This lack of clarity became a real problem, to the point where I didn’t trust the visual. I had to spend a minute translating it before I could react and notice any valuable information.&lt;/p&gt;

&lt;p&gt;Right when I was ready to leave for the day, I decided to quickly try out an idea. I scrapped the bars and started fresh. I tried to imagine a scheduling timeline without any history of what I have designed so far. Since it pertains dates and timespans, it should use dots and lines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-actual.png&quot; alt=&quot;2014-08-19-estimated-actual&quot;&gt; &lt;/p&gt;

&lt;p&gt;The dots will represent the dates. For projects, this currently includes the estimated start/finish dates and actual start/finish dates. For invoices, the issue date, due date, and paid date. Estimated dates shouldn’t carry the same weight as the actual dates because they’re not confirmed, so any estimated dates will have a different style—an outlined circle. Then, any actual date will be a solid fill.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-hide-estimated.png&quot; alt=&quot;2014-08-19-hide-estimated&quot;&gt; &lt;/p&gt;

&lt;p&gt;This felt like a lot of dots. Then I realized we could imply the existence of the estimated dates through the style of the line. If a project starts late, the line from the estimated start date to the actual start date should be a lighter version of the working line. That alone tells what we want to know, but then we can show the specific dates upon hovering the project. This way, we can establish an overall timeline UX of “hover to show more information”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-future-project.png&quot; alt=&quot;2014-08-19-future-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;Hiding the estimated dates outside of hover also helps us when it comes to future projects. With no actual dates, these future projects are represented by only a light line—clearly showing that a project spans that timeframe, but it hasn’t been anchored with the weight of actual dates. Now there’s an obvious difference between a past project and a future project. But, what about current projects?&lt;/p&gt;

&lt;p&gt;With the previous bar design, we had no clear way of knowing which projects you were actively working on or which invoices were in the pipeline. I wanted to be able to look at the timeline and immediately know how many projects were active and which ones. With this new design, I introduced a new element—an arrow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-project.png&quot; alt=&quot;2014-08-19-active-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For any project or invoice that spans the current date, an arrow will appear on that line. If a project has started, the line up until that arrow will be solid to show that you’ve actively worked on it up until now. The line after the arrow will remain lighter to indicate that you haven’t worked through that time yet, but it can potentially span that far.&lt;/p&gt;

&lt;p&gt;An arrow was the first thing that came to mind as a way of showing activity and it worked right off the bat. I can clearly distinguish these projects from the others and I don’t need a label because it pointing in the direction of time is all we need to get the point across.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-project.png&quot; alt=&quot;2014-08-19-dragged-project&quot;&gt; &lt;/p&gt;

&lt;p&gt;For projects that drag on, I reclaimed the hash pattern from the previous design. I still think it works with this new look as long as it’s the only place where we use a hash pattern. Also, like before, the pattern animates if an invoice is currently late. The movement is subtle enough to instill a sense of urgency, but won’t send you into panic mode.&lt;/p&gt;

&lt;p&gt;In the previous post, I touched on a new tooltip design for the scheduling timeline, showing more useful information than just a client/project label. With this new design, I decided to take it a step further and show even more. Since we’re now working with several new elements—dots, lines, and arrows—we could utilize all three of these to tell us more about projects and invoices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-estimated-finish-tooltip.png&quot; alt=&quot;2014-08-19-estimated-finish-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For dots, show the date that it represents and reiterate whether it’s estimated or not. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-dragged-tooltip.png&quot; alt=&quot;2014-08-19-dragged-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;For lines, indicate the duration of the line and what it represents—early, late, drag, active, etc. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-active-date-tooltip.png&quot; alt=&quot;2014-08-19-active-date-tooltip&quot;&gt; &lt;/p&gt;

&lt;p&gt;And for arrows, simply show that a project or invoice is active as of the current date. These new details help in revealing the additional information you would want to know, but it also keeps us from needing an additional key to reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-19-new-timeline.png&quot; alt=&quot;2014-08-19-new-timeline&quot;&gt; &lt;/p&gt;

&lt;p&gt;After using the new scheduling timeline design for the past few days, I feel so much more confident and on top of things. I honestly can’t believe I even considered the previous design in the first place, but at least I know I’m making progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-08-11</title>
      <link>http://cushionapp.com/journal/2014-08-11</link>
      <pubDate>Mon, 11 Aug 2014 09:43:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-08-11</guid>
      <description>&lt;p&gt;This last week, I focused primarily on the Cushion backend. In working locally on the app, I realized that it was becoming sluggish—especially on pages with a lot of content. I’ve been building this app with progress in mind, so I haven’t been as considerate as I should be. I query the database far too often and calculate the results in Ruby when it could all be done in the database. Because of this, performance issues are apparent.&lt;/p&gt;

&lt;p&gt;For example, a single request to retrieve a list of projects uses a single query for the projects, but then three additional queries for each project to grab the sum of its invoices. With my current personal data, this resulted in nearly 150 queries just to pull down my projects! Not good.&lt;/p&gt;

&lt;p&gt;I knew this would happen when I wrote the code because, at the time, I just needed it to work. I’m being a responsible dev and using test-driven development for the backend, so in order for the tests to pass, they just need the correct result. Now that I’m further along, however, I also need the code to perform well. Luckily, I can go back and fine-tune the code, knowing that my tests are in place to double-check that it still works.&lt;/p&gt;

&lt;p&gt;After getting up to speed with PostgreSQL, I realized just how much I could do in the database rather than in Ruby—apparently, much more than I imagined. I started by focusing on those invoices sums—paid income, unpaid income, and relative estimated income. The first two are straightforward—just paid invoices and unpaid invoices—but the last one is trickier.&lt;/p&gt;

&lt;p&gt;Every project has an estimated income, which is a ballpark amount that this project could potentially bring in. It’s not a guarantee that you’ll reach that amount, nor is it a guarantee that it will &lt;em&gt;only&lt;/em&gt; bring in that amount. It’s just a figure to give you an idea. With this figure, however, we can do some interesting things, like seeing how close or far off you were.&lt;/p&gt;

&lt;p&gt;If we take the estimated income for a project and subtract the sum of its invoices, we can see the actual income relative to the estimated amount. As you’re working on the project, this can be useful for seeing how much is potentially remaining, if it’s capped-off at that amount. Or, if you’re working hourly without a cap, you  can see how much more you’ve made than originally anticipated. Hopefully, you fall in the latter end of this example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-client-budget.png&quot; alt=&quot;2014-08-11-client-budget&quot;&gt; &lt;/p&gt;

&lt;p&gt;I wrapped up projects and moved up the chain to clients. For clients, I have these sums of income as well, but on a wider scale, combining the sums of each client’s projects. This is useful in seeing which clients bring in the most (in case you need to spread out your income streams) and which clients owe you the most (revealing a red flag going forward).&lt;/p&gt;

&lt;p&gt;We also have a lot of data to play with in regards to scheduling. Since every project has both estimated and actual start dates and end dates, I’ve been able reveal projects that start late or drag on too long. This is useful enough on the project level, but if we take a step back and group the projects by client, we can learn a lot about client tendencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-client-schedule.png&quot; alt=&quot;2014-08-11-client-schedule&quot;&gt; &lt;/p&gt;

&lt;p&gt;Now, instead of sums, we can calculate averages. The three main columns represent the average duration, delay and drag of clients. With them, we can expose a lot. If a client consistently feeds you only small scope projects, you can know with confidence whether you can fit them in an open slot in your schedule. On the cautionary side, we can use average delay and drag to question whether you should still work with this client or just account for the delay and drag when planning the next gig with them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-08-11-tooltips.png&quot; alt=&quot;2014-08-11-tooltips&quot;&gt; &lt;/p&gt;

&lt;p&gt;I also improved the schedule tooltip to provide written details of what you’re looking at rather than forcing you to do the math—you can now point to a specific segment of a bar and see what it represents. For clients and projects, these segments include the delay, drag, duration and estimated duration.&lt;/p&gt;

&lt;p&gt;Under invoices, using the dates assigned to each (issued, due, and paid), the segments represent how early an invoice was paid, how late an invoice was paid (more realistic), how long an invoice took to get paid, and how long until an invoice is due.&lt;/p&gt;

&lt;p&gt;With these new tooltips in place, I feel like I’m going in a really good direction—taking useful data and making it easily accessible. Being able to see the data in table form is easy, but I’d rather provide the ability to interact with data in context.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-07-29</title>
      <link>http://cushionapp.com/journal/2014-07-29</link>
      <pubDate>Tue, 29 Jul 2014 10:14:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-07-29</guid>
      <description>&lt;p&gt;This past weekend, I focused on usability. My first stab on the layout of model forms was haphazard. While showing Cushion to a few people, I could see an obvious hesitation on where to start when creating a new project. All of a sudden, the user is presented with fields all over the place with no clear direction.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2014-07-29-new-form-layout.png&quot;&gt;&lt;img src=&quot;/assets/2014-07-29-new-form-layout.png&quot; alt=&quot;2014-07-29-new-form-layout&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Believe it or not, I had a dream about the new layout and it’s the one I’m going with. Instead of letting the sections rest aside each other and reflow when needed, I just stack them and separate with dividers. Now, the sections actually represent the different views of Cushion (schedule and budget) and there’s a clear flow from top to bottom. &lt;/p&gt;

&lt;p&gt;At first, I was worried there would be too much negative space in the smaller sections, like budget, but it doesn’t feel as bad—especially if I end up going with a budget range instead of a single value. Also, this layout allows me to potentially include mini visuals for each section that provides more context than just input fields. Imagine the budget section including the average budget for your projects or the average budget for the client of that project. All of a sudden, you have a better idea of where to start.&lt;/p&gt;

&lt;p&gt;Along with a revision of the layout, I’ve been working on improving the actual input fields. From the start, I chose HTML5’s native input types, thinking these would take care of a ton of extra work in the early stages. Unfortunately, some of the native input types, like &lt;code&gt;&amp;lt;input type=&amp;#39;date&amp;#39;&amp;gt;&lt;/code&gt;, are cemented in ugly (can’t be styled) and don’t even work in common browsers like Safari.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-07-29-color-picker.png&quot; alt=&quot;2014-07-29-color-picker&quot;&gt; &lt;/p&gt;

&lt;p&gt;The first input type I tackled was the color picker. I took a page from my buddies at &lt;a href=&quot;http://friendsoftheweb.com/&quot;&gt;Friends of the Web&lt;/a&gt; with their &lt;a href=&quot;http://dayswork.co&quot;&gt;Dayswork&lt;/a&gt; app and provided a simple popover of suggested colors. I &lt;em&gt;hate&lt;/em&gt; color pickers on the web that mimic those in design tools like Photoshop—they assume everyone is a designer. With suggested colors, any one of them will look good, and in most cases, you won’t need to use it because your client already has an established color. Considering this, the color picker is more of an easy way to get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-07-29-date-picker.png&quot; alt=&quot;2014-07-29-date-picker&quot;&gt;&lt;/p&gt;

&lt;p&gt;Next, I addressed the date picker. For this, I wanted a design that is both useful and obvious to navigate—it should also have a couple Cushion-specific features that support the reasoning behind going custom. For instance, if the date is part of a range, the dates within the range should highlight to indicate that. Also, for validation purposes, you shouldn’t be able to pick a finish date that comes before the range’s start date.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-07-29-color-inheritance.png&quot; alt=&quot;2014-07-29-color-inheritance&quot;&gt; &lt;/p&gt;

&lt;p&gt;In filling out the forms, I also realized how tedious the process felt. Because of this, I added value inheritance. Let’s say you create a new project, but it doesn’t necessarily call for a color other than its client’s. Before, you would need to re-enter your client’s color. Now, it defaults to using the client’s color unless specified otherwise. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2014-07-29-inline-client-inheritance.png&quot; alt=&quot;2014-07-29-inline-client-inheritance&quot;&gt; &lt;/p&gt;

&lt;p&gt;This also works reversely for the inline client creation. If you create a new project and set its color, the inline client will inherit that color by default.&lt;/p&gt;

&lt;p&gt;Lastly, client and project symbols are now auto-generated with the ability to override them. This means if you create a new client named “Vandelay Industries”, its symbol will be “VI” by default, but you could overwrite it to something like “VanInd” if you want.&lt;/p&gt;

&lt;p&gt;These recent updates have me incredibly excited to get Cushion in the hands of others as soon as possible. I know most of them are unnecessary for an initial beta release, but I want this app to be a joy to use from the start.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2014-07-24</title>
      <link>http://cushionapp.com/journal/2014-07-24</link>
      <pubDate>Thu, 24 Jul 2014 08:37:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/journal/2014-07-24</guid>
      <description>&lt;p&gt;I’ve been contemplating not mentioning this just yet because I don’t want it to seem like I’m ready to launch the beta, but… Cushion is now online. This past weekend, after great pressure from my wife (also a freelancer), I decided to set up everything needed to get Cushion working on a server. &lt;/p&gt;

&lt;p&gt;I knew this would be a challenge, as it always is, but I wanted to get it out of the way early, so that everything I change from now on will need to work in production, avoiding any last-minute surprises. Also, it helps me establish a better process for updating the app, through the use of continuous integration and an asset pipeline that keeps compiled code outside of the dev branch.&lt;/p&gt;

&lt;p&gt;Along with all the deployment setup, I’ve integrated a few helpful services for performance metrics, exception tracking, and user analytics. As I progress with Cushion, I’ll rely on these services to fine-tune the app along the way. Everything is also wired to my personal Slack room, so I’m alerted of any issues as they happen. I want to get this app right from the start and this extra preparation will go a long way.&lt;/p&gt;

&lt;p&gt;Regarding the beta, I don’t have a definite date in mind, but it’s sooner than later. I have a short list of crucial items to tackle, then all of the payment and legal stuff. As a reminder, the beta is paid in order to support early development and encourage users to provide real feedback. I’ve been a part of far too many free betas that attract countless stagnant users because there’s no incentive or motivation to consistently test the app.&lt;/p&gt;

&lt;p&gt;If you’re interested in taking part in the beta, &lt;a href=&quot;/&quot;&gt;sign up&lt;/a&gt; to be notified.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSL Service</title>
      <link>http://cushionapp.com/expenses/ssl-certificate-service</link>
      <pubDate>Mon, 21 Jul 2014 18:11:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/ssl-certificate-service</guid>
      <description></description>
    </item>
    
    <item>
      <title>SSL Certificate</title>
      <link>http://cushionapp.com/expenses/ssl-certificate</link>
      <pubDate>Mon, 21 Jul 2014 18:10:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/ssl-certificate</guid>
      <description></description>
    </item>
    
    <item>
      <title>Web App Database</title>
      <link>http://cushionapp.com/expenses/web-app-database</link>
      <pubDate>Mon, 21 Jul 2014 18:10:00 -0400</pubDate>
      <author>Jonnie Hallman</author>
      <guid>http://cushionapp.com/expenses/web-app-database</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
